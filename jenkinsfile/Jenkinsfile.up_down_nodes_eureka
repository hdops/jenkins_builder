def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline {
   agent {label node}
    options {   
	    timeout(time: 15, unit: 'MINUTES')
    }              
    stages {
        stage('up down nodes eureka') {
            steps {
				script {
                    if (env.on_k8s){
                        container('hdtoolsetcore'){
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "svnreversion is ${params.svnreversion}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} DINGTALK_TOKEN=${DINGTALK_TOKEN} hdops up_down_nodes_eureka --action ${params.action} --container ${params.container} --receivers ${params.receivers} --dryrun ${params.dryrun}"
                                }
                            }else{
                                sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} DINGTALK_TOKEN=${DINGTALK_TOKEN} hdops up_down_nodes_eureka --action ${params.action} --container ${params.container} --receivers ${params.receivers} --dryrun ${params.dryrun}"
                            }
                        }
                    }else {
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "svnreversion is ${params.svnreversion}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} DINGTALK_TOKEN=${DINGTALK_TOKEN} hdops up_down_nodes_eureka --action ${params.action} --container ${params.container} --receivers ${params.receivers} --dryrun ${params.dryrun}"
                                }
                            }else{
                                sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} DINGTALK_TOKEN=${DINGTALK_TOKEN} hdops up_down_nodes_eureka --action ${params.action} --container ${params.container} --receivers ${params.receivers} --dryrun ${params.dryrun}"
                            }
                        }
                    }
                }
            }
        }
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
		aborted {
            dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl:  "${jenkinsUrl}", message: "被取消了(${new Date().format("yyyy-MM-dd HH:mm:ss")})", notifyPeople: '13370268139'
        }
    }
}
