def node="develop"
if (env.node){
    node =env.node
}

def ci_git_server_baseurl= "https://gitlab.hd123.com"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}

def jpos_image= "harborka.qianfan123.com/base/maven:3.2.5-centos7-ci"
if (env.jpos_image){
    jpos_image =env.jpos_image
}

def credentialsId="appGitLab"
if (env.credentials_id){
  credentialsId = env.credentials_id
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def gitpath = "None"
if (env.gitpath){
    gitpath = env.gitpath
}
pipeline {
    agent {
		docker {
		    label node
            image "${jpos_image}"
            args "--rm -v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime -v /etc/timezone:/etc/timezone -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /hdapp/npm:/root/.npm -v /root/.npmrc:/root/.npmrc -v /root/.docker/config.json:/root/.docker/config.json  --add-host=maven.qianfan123.com:172.17.0.82 --add-host=github.app.hd123.cn:172.17.10.58 --add-host=gitlab.hd123.com:172.17.12.219 --entrypoint='' "
          }
	}
    options {
	    timeout(time: 2, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout') {
             steps{ 
				echo "checkout ${ci_git_server_baseurl}/${git_project}.git  branch:${build_branch}"
				retry(5){
                    checkout([$class: 'GitSCM', branches: [[name: "*/${build_branch}"]],userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "${ci_git_server_baseurl}/${git_project}.git"]],extensions: [[$class: 'LocalBranch', localBranch: "${build_branch}"]]])
                }
             }
         }  
		stage('release') {
		    steps{
				script{  
                        def jpos_build_shell="sh "
					    jpos_build_shell+=env.jpos_build
                        echo "jpos_build_shell is ${jpos_build_shell}"
					    sh "  ${jpos_build_shell}"
				}
			} 
		}
		stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            DNET_PROFILE = item[2]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            echo "DNET_PROFILE is ${DNET_PROFILE}"
                            // env
                            triggerRemoteJob job: "${remoteJob}", maxConn: 1, parameters: """DNET_PROFILE=${DNET_PROFILE}
DNET_PRODUCT=${DNET_PRODUCT}
image=${image}
version=${imageVersion}
gitpath=${gitpath}
sourcefrom=git
    """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: true
                        }
				    }
				}
			}
		}
    }
}
