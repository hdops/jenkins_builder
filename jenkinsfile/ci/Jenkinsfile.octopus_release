def node="master"
if (env.node){
    node =env.node
}

def credentialsId="qianfan"

//  主要需要 git + dokcer 环境
def build_image= "harbor.qianfan123.com/base/golang:1.16.4"
if (env.build_image){
    build_image =env.build_image
}

def git_base_url="https://gitlab.hd123.com/"
if (env.git_base_url){
    git_base_url=env.git_base_url
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    // agent {label node}
    agent {
		docker {
            image "${build_image}"
            label node
            args '--rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /root/.docker/config.json:/root/.docker/config.json'
          }
	}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout') {
             steps{ 
				echo "checkout ${git_base_url}/${git_project}.git  branch:${build_branch}"
				retry(3){
                    checkout([$class: 'GitSCM', branches: [[name: '*/${build_branch}']],userRemoteConfigs: [[url: '${git_base_url}/${git_project}.git',credentialsId: "${credentialsId}"]]])
                }
                sh """git config user.email qianfan@hd123.com
git config user.name qianfan
git checkout ${releaseBranchName}
git checkout ${build_branch}
git pull
git merge -s recursive -X theirs ${releaseBranchName} -m '版本发布'
git push origin ${build_branch}
make modify-ver
git add .
git commit -m "${releaseVersion}" || echo "${releaseVersion}"
git push
git tag ${releaseVersion}
git push --tags"""
             }
         }
		stage('build') {
		    steps{
				script{
					sh "docker -v"
					echo "build_image is ${build_image}"
					docker_build_shell = "make all"
					sh "${docker_build_shell}"
				}
			} 
		}
        stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        File file = new File("${WORKSPACE}/VERSION")
                        ImageVersion = file.text
                        echo("ImageVersion=${ImageVersion}")
                        // remote_env
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            // env
                            triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """image=${image}
version=${ImageVersion}
    """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
				    }
				}
			}
		}
    }
}
