def node="develop"
if (env.node){
    node =env.node
}

def node_image= "harbor.qianfan123.com/base/node:9.11.2"
if (env.node_image){
    node_image =env.node_image
}

def ci_git_server_baseurl= "http://github.app.hd123.cn:10080"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}

def credentialsId="appGitLab"
if (env.credentials_id){
  credentialsId = env.credentials_id
}

def build_branch="develop"
if (params.build_branch){
    build_branch =params.build_branch
}

def packageRemoteJob="createResourcePackage"
if (env.packageRemoteJob){
    packageRemoteJob = env.packageRemoteJob
}

def uploadRemoteJob="upload_to_oss_customer"
if (env.uploadRemoteJob){
    uploadRemoteJob = env.uploadRemoteJob
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
def toolset_image_version="0.3.0"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}

pipeline {
	agent {
        docker {
          image "${node_image}"
          args '--add-host=devops-gitlab.hd123.com:118.178.114.72 --rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /hdapp/npm:/root/.npm  -v /root/.npmrc:/root/.npmrc'
          label node
        }
	}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout & build') {
             steps{
                script{
                    echo "checkout ${ci_git_server_baseurl}/${git_project}.git  branch:${build_branch}"
                    retry(5){
                        checkout([$class: 'GitSCM', branches: [[name: '*/${build_branch}']],extensions: [[$class: 'CloneOption', depth: 1, shallow: true]], userRemoteConfigs: [[url: "${ci_git_server_baseurl}/${git_project}.git",credentialsId: "${credentialsId}"]]])
                    }

                    echo "npm_shell is ${npm_shell}"
                    sh "  ${npm_shell}"
                    archiveArtifacts '*.tar.gz'
                    withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        sh "DNET_PRODUCT=dnet GIT_SITE=${ci_git_server_baseurl} GIT_PROJECT=${git_project} GIT_BRANCH=${build_branch} DNET_PROFILE=integration_test hdmon nodejs_integration --path /opt --jenkins_url ${BUILD_URL}"
                    }
				}
             }
         }  
        stage('打包'){
			steps{
				script{
						echo "subsystem:${subsystem}"
						echo "BUILD_URL:${BUILD_URL}"
						// def now = new Date() 
						// fromVersion =now.format("yyyyMMdd", TimeZone.getTimeZone('UTC'))
						def fromVersion = ""
						if (env.fromVersion){
						    fromVersion =env.fromVersion
						}else{
						    fromVersion =build_branch
						}
						echo "fromVersion:${fromVersion}"
						echo "alias:${alias}"
						build job: "${packageRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'BUILD_URL', value: BUILD_URL), string(name: 'fromVersion', value: fromVersion), string(name: 'toVersion', value: alias), string(name: 'alias', value: alias)], wait: true
				}
			}
		}
        stage('部署'){
		    when {
			    expression {'develop' == "${build_branch}"}
			}
			steps{
					script{
							echo "subsystem:${subsystem}"
							def oss_resources=""
							def fromVersion = ""
							if (env.fromVersion){
							    fromVersion =env.fromVersion
							}else{
							    fromVersion =build_branch
							}
							oss_resources = env.subsystem + "-" + fromVersion+ "-" + env.alias + ".tar.gz"
							echo "oss_resources:${oss_resources}" 
							build job: "${uploadRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'oss_resources', value: oss_resources)], wait: false
				}
			}
		}
    }
}
