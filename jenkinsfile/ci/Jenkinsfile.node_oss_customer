def node="master"
if (env.node){
    node =env.node
}

def node_image= "harbor.qianfan123.com/base/node:9-alpine"
if (env.node_image){
    node_image =env.node_image
}

def credentialsId="qianfan"

def build_branch="develop"
if (params.build_branch){
    build_branch =params.build_branch
}

def packageRemoteJob="createResourcePackage"
if (env.packageRemoteJob){
    packageRemoteJob = env.packageRemoteJob
}

def uploadRemoteJob="qianfan-front-web-oss"
if (env.uploadRemoteJob){
    uploadRemoteJob = env.uploadRemoteJob
}

pipeline {
	agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout & build') {
              agent {
			    docker {
			    image "${node_image}"
			    args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /hdapp/npm:/root/.npm'
			    }
             }
             steps{ 
				echo "checkout http://github.app.hd123.cn:10080/${git_project}.git  branch:${build_branch}"
				// git branch: "${build_branch}", credentialsId: "${credentialsId}", url: 'http://github.app.hd123.cn:10080/${git_project}.git'
                checkout([$class: 'GitSCM', branches: [[name: '*/${build_branch}']],userRemoteConfigs: [[url: 'http://github.app.hd123.cn:10080/${git_project}.git',credentialsId: "${credentialsId}"]]])
				
				echo "npm_shell is ${npm_shell}"
				sh "  ${npm_shell}" 
				archiveArtifacts '*.tar.gz' 
             }
         }  
        stage("${packageRemoteJob}"){
			steps{
				script{
						echo "subsystem:${subsystem}"
						echo "BUILD_URL:${BUILD_URL}"
						def now = new Date() 
						def fromVersion = ""
						if (env.fromVersion){
						    fromVersion =env.fromVersion
						}else{
						    fromVersion =now.format("yyyyMMdd", TimeZone.getTimeZone('UTC'))
						}
						echo "fromVersion:${fromVersion}"
						def toVersion=""
						if (env.toVersion){
						    toVersion =env.toVersion
						}else{
						    toVersion =build_branch
						}
						echo "toVersion:${toVersion}"
						def alias=""
						if (env.alias){
						    alias =env.alias
						}else{
						    alias =build_branch
						}
						echo "alias:${alias}"
						build job: "${packageRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'BUILD_URL', value: BUILD_URL), string(name: 'fromVersion', value: fromVersion), string(name: 'toVersion', value: toVersion), string(name: 'alias', value: alias)], wait: true
				}
			}
		}
        stage("${uploadRemoteJob}"){
		    when {
			    expression {'develop' == "${build_branch}"}
			}
			steps{
					script{
							echo "subsystem:${subsystem}"
							def oss_resources=""
							oss_resources = env.subsystem + "-" + env.fromVersion+ "-" + env.alias + ".tar.gz"
							echo "oss_resources:${oss_resources}" 
							build job: "${uploadRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'oss_resources', value: oss_resources)], wait: false
				}
			}
		}
    }
}