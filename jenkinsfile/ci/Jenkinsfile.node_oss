def node="master"
if (env.node){
    node =env.node
}

def node_image= "harbor.qianfan123.com/base/node:9-alpine"
if (env.node_image){
    node_image =env.node_image
}

def credentialsId="qianfan"

pipeline {
	agent none
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout & build') {
              agent {
			    docker {
			    image "${node_image}"
			    args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /hdapp/npm:/root/.npm'
			    }
             }
             steps{ 
				echo "checkout http://github.app.hd123.cn:10080/${git_project}.git  branch:${build_branch}"
				// git branch: "${build_branch}", credentialsId: "${credentialsId}", url: 'http://github.app.hd123.cn:10080/${git_project}.git'
                checkout([$class: 'GitSCM', branches: [[name: '*/${build_branch}']],userRemoteConfigs: [[url: 'http://github.app.hd123.cn:10080/${git_project}.git',credentialsId: "${credentialsId}"]]])
				
				echo "npm_shell is ${npm_shell}"
				sh "  ${npm_shell}" 
				archiveArtifacts '*.tar.gz' 
             }
         }  
        stage('createResourcePackage'){ 
			steps{
                            build job: 'createResourcePackage', parameters: [string(name: 'DNET_PROFILE', value: '${DNET_PROFILE}'), string(name: 'subsystem', value: '${subsystem}'), string(name: 'BUILD_URL', value: '${BUILD_URL}'), string(name: 'fromVersion', value: '${fromVersion}'), string(name: 'toVersion', value: '${toVersion}'), string(name: 'alias', value: '${alias}')], wait: false
			}
		}
        stage('qianfan-front-web-oss'){ 
			steps{
                            build job: 'qianfan-front-web-oss', parameters: [string(name: 'DNET_PROFILE', value: '${DNET_PROFILE}'), string(name: 'DNET_CLOUD_VENDOR', value: '${DNET_CLOUD_VENDOR}'), string(name: 'subsystem', value: '${subsystem}'), string(name: 'oss_resources', value: '${subsystem}-${fromVersion}-${alias}.tar.gz')], wait: false
			}
		}
    }
}