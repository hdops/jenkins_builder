def node="develop"
if (env.node){
    node =env.node
}

def ci_git_server_baseurl= "http://github.app.hd123.cn:10080"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}

def node_image= "harbor.qianfan123.com/base/node:9.11.2"
if (env.node_image){
    node_image =env.node_image
}

def credentialsId="appGitLab"
if (env.credentials_id){
  credentialsId = env.credentials_id
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def gitpath = "None"
if (env.gitpath){
    gitpath = env.gitpath
}
pipeline {
    // agent {label node}
    agent {
		docker {
		    label node
            image "${node_image}"
            args '--rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /hdapp/npm:/root/.npm -v /root/.npmrc:/root/.npmrc -v /root/.docker/config.json:/root/.docker/config.json  --add-host=maven.qianfan123.com:172.17.0.82 --add-host=github.app.hd123.cn:172.17.10.58 --add-host=gitlab.hd123.com:172.17.12.219 '
          }
	}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout') {
             steps{ 
				echo "checkout ${ci_git_server_baseurl}/${git_project}.git  branch:${build_branch}"
				retry(5){
				    checkout([$class: 'GitSCM', branches: [[name: "*/${build_branch}"]],userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "${ci_git_server_baseurl}/${git_project}.git"]]])
				}
             }
         }  
		stage('build') {
		    steps{
				script{  
					echo "npm_shell is ${npm_shell}"
					sh "  ${npm_shell}"
					if (env.docker_harbor){
						echo "docker_harbor is ${docker_harbor}"
						if (env.docker_harbor.endsWith('/')){
					    	docker_build_tag = env.docker_harbor + env.image + ":" + env.imageVersion
						} else{
						    docker_build_tag = env.docker_harbor + "/" + env.image + ":" + env.imageVersion
						}
						echo "docker_build_tag is ${docker_build_tag}"
						docker_build_shell = "docker build -t " + docker_build_tag + " . && docker push " + docker_build_tag
					    //echo "docker_build_shell is ${docker_build_shell}"
						sh "  ${docker_build_shell}"  
					}
				}
			} 
		}
		stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            DNET_PROFILE = item[2]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            echo "DNET_PROFILE is ${DNET_PROFILE}"
                            // env
                            triggerRemoteJob job: "${remoteJob}", maxConn: 1, parameters: """DNET_PROFILE=${DNET_PROFILE}
DNET_PRODUCT=${DNET_PRODUCT}
image=${image}
version=${imageVersion}
gitpath=${gitpath}
sourcefrom=git
    """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: true
                        }
				    }
				}
			}
		}
        stage('deploy'){
			steps{
				script{
				    if (env.remote_deploy_cfg != "" && env.remote_deploy_cfg != null) {
						// remote_deploy
                        println(env.remote_deploy_cfg)
                        String[] data = env.remote_deploy_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            DNET_PROFILE = item[2]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            echo "DNET_PROFILE is ${DNET_PROFILE}"
                            // deploy
                            triggerRemoteJob job: "${remoteJob}", maxConn: 1, parameters: """DNET_PROFILE=${DNET_PROFILE}
DNET_PRODUCT=${DNET_PRODUCT}
subsystem=${subsystem}
skipversion=${skipversion}""", remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
                    }
				}
			}
		}
        stage('deploy on k8s'){
			steps{
				script{
				    if (env.remote_deploy_k8s_cfg != "" && env.remote_deploy_k8s_cfg != null) {
                        // remote_deploy
                        println(env.remote_deploy_k8s_cfg)
                        String[] data = env.remote_deploy_k8s_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            DNET_PROFILE = item[2]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            echo "DNET_PROFILE is ${DNET_PROFILE}"
                            // deploy
                            triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """DNET_PROFILE=${DNET_PROFILE}
image=${subsystem}""", remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
                    }
				}
			}
		}
    }
    post{
        success{
            script{
                if (env.post_shell){
                    sh """
                    ${env.post_shell}
                    """
                }
                if (env.upload_wgt_file != "" && env.upload_wgt_file != null) {
                    // archiveArtifacts
                    archiveArtifacts '**/*.wgt' 
                    // print 
                    println(env.upload_wgt_file)
                    echo "jenkins_build_url:${BUILD_URL}" 
                    echo "type:${type}" 
                    echo "gitlab_project:${gitlab_project}" 
                    echo "jenkin_job:${jenkin_job}" 
                    echo "label:${label}" 
                    echo "is_new_publisher:${is_new_publisher}" 
                    echo "is_autopublish:${is_autopublish}" 
                    // post_build
                    build job: "upload_wgt_file", parameters: [string(name: 'jenkins_build_url', value: BUILD_URL), string(name: 'type', value: type), string(name: 'gitlab_project', value: gitlab_project), string(name: 'jenkin_job', value: jenkin_job), string(name: 'label', value: label), string(name: 'is_new_publisher', value: is_new_publisher), string(name: 'is_autopublish', value: is_autopublish)], wait: false
                }
            }
        }
    }
}
