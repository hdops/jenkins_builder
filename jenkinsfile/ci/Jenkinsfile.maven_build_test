def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def docker_args="-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker"
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository+":/hdapp/java"
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}


def credentialsId="qianfan"
 

pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            args "${docker_args}"
          }}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('deploy'){
			steps{
				script{
                    println(env.remote_deploy_cfg)
                    // data = env.remote_deploy_cfg.split('&')
                    data = "k8s-int|BAAS_Integration_test/BAAS_Deploy_one_Int|integration_test&k8s-int|BAAS_Integration_test/BAAS_Deploy_one_Int|integration_test"
                    println(data)
                    count = data.size()
                    tasks = [:]
                    def i = 0
                    for(i = 0; i < count; i = i + 1){
                        item = data[i].split('|')
                        println(item)
                        remoteJenkins = item[0]
                        remoteJob = item[1]
                        DNET_PROFILE = item[2]
                        tasks[remoteJenkins] = {
                            stage("${remoteJob}") {
                                echo "remoteJenkins is ${remoteJenkins}"
                                echo "remoteJob is ${remoteJob}"
                                echo "DNET_PROFILE is ${DNET_PROFILE}"
                                triggerRemoteJob job: "${remoteJob}", maxConn: 1, parameters: '''DNET_PROFILE=${DNET_PROFILE}
subsystem=${subsystem}
skipversion=${skipversion}''', remoteJenkinsName: "${remoteJenkins}", useCrumbCache: true, useJobInfoCache: true
                            }
                        }
                    }
                    parallel tasks
				}
			}
		}
    }
}