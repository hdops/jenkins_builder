def node=""
if (env.node){
    node =env.node
}else{
    node ="develop"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def ci_git_server_baseurl= "http://github.app.hd123.cn:10080"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}

// def svn_server_baseurl= "http://hddenv/svn"
def svn_server_baseurl= "http://172.17.0.85/svn"
if (env.svn_server_baseurl){
    svn_server_baseurl = env.svn_server_baseurl
}

def source_code_management=""
if (env.source_code_management){
    source_code_management =env.source_code_management
}else{
    source_code_management ="git"
}

def docker_args="--rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --add-host=maven.qianfan123.com:172.17.0.101 --add-host=apidoc.hd123.com:172.17.10.53 --add-host=github.app.hd123.cn:172.17.10.58 --add-host=gitlab.hd123.com:172.17.12.219 "
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}

def mvn_configfile="jdk8"
if (env.mvn_configfile){
    mvn_configfile =env.mvn_configfile
}

def skipversionupdate="--no-skipversionupdate"
if (env.skipversionupdate){
    skipversionupdate =env.skipversionupdate
}

def toolset_image_version="0.3.0"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}


def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            label node
            args "${docker_args}"
          }}
    options {
	    timeout(time: 1, unit: 'HOURS')
    }
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('checkout') {
            steps{
                script{
                    if (source_code_management == "git"){
                        echo "checkout ${ci_git_server_baseurl}/${git_project}.git  branch:${build_branch}"
                        retry(5){
                            checkout([$class: 'GitSCM', branches: [[name: "${build_branch}"]],userRemoteConfigs: [[credentialsId: 'qianfan',url: "${ci_git_server_baseurl}/${git_project}.git"]]])
                        }
                    } else if (source_code_management == "svn"){
                        echo "${svn_server_baseurl}/${svn_project}/${build_branch}"
                        retry(5){
                            checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: false, credentialsId: 'hddenv', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: "${svn_server_baseurl}/${svn_project}/${build_branch}"]], quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
                        }
                    }
                }
            }
        }
        stage('pre-build-1') {
            steps{
                script{
                    echo "执行`mven help:effective-pom`,生成effectivepom.xml"
                    def mvn_shell="mvn help:effective-pom -Doutput=effectivepom.xml"
                    configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                        mvn_shell+=" -s $maven_settings"
                        echo "mvn_shell is ${mvn_shell}"
                        sh "${mvn_shell}"
                    }
                }
            }
        }
         stage('pre-buil-2') {
            steps{
                 script {
                    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside("--rm -v ${WORKSPACE}:/opt --add-host=apidoc.hd123.com:172.17.10.53")  {
                    //withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt --add-host=apidoc.hd123.com:172.17.10.53", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        echo "服务白名单检查"
                        sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_docker_check --pomfile /opt/effectivepom.xml --configfile http://github.app.hd123.cn:10080/qianfanops/toolset/raw/develop/check/maven_check_dependency.yaml"
                    }
                 }
            }
         }
		stage('build') {
		    steps{
				script{
						def mvn_shell="mvn "
                        if (env.mvn_pom){
                            mvn_shell+=" -f "+env.mvn_pom+" "+env.mvn_goals
                            }
                        else{
                            mvn_shell+=env.mvn_goals
                            }
                        if (env.mvn_options){
                            echo "mvn_options is ${mvn_options}"
                            mvn_shell+=" -D"+env.mvn_options+"=true"
                            }
                        echo "mvn_configfile is ${mvn_configfile}"
                        configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                                mvn_shell+="  -s $maven_settings"
                                echo "mvn_shell is ${mvn_shell}"
                                sh "${mvn_shell}"
                            }
				}
			}
            post{
                always{
                    script{
                        if (env.DNET_PRODUCT){
                            echo "run sourcecode scan"
                            //build job: 'sourcecode_scan', parameters: [string(name: 'url', value: BUILD_URL),string(name: 'product', value: DNET_PRODUCT)], wait: false
                        }
                    }
                }
        
                failure{
                    script{

                        def subject = env.email_build_subject ? "[Jenkins]${env.email_build_subject}" : "[Jenkins]构建失败-${env.JOB_NAME}"
                        def to = env.email_build_recipients ? "${env.email_build_recipients}" : "heweiwei@hd123.com"
                        def body = env.email_build_body ? "${env.email_build_body}" : "${env.JOB_NAME}构建失败,更多信息请查阅：${BUILD_URL}"
                        // send email
                        emailext subject: subject, to: to, body:body,attachLog:true
                    }
                }
            }
		}
		stage('unite test') {
            when {
                expression {'Y' == env.unite_test}
            }
		    steps{
				script{
						def mvn_shell="mvn "
                        if (env.mvn_pom){
                            mvn_shell+=" -f "+env.mvn_pom+" "+env.mvn_unite_test_goals
                            }
                        else{
                            mvn_shell+=env.mvn_unite_test_goals
                            }
                        if (env.mvn_unite_test_options){
                            echo "mvn_unite_test_options is ${mvn_unite_test_options}"
                            mvn_shell+=" -D"+env.mvn_unite_test_options+"=true"
                            }
                        echo "mvn_configfile is ${mvn_configfile}"
                        configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                                mvn_shell+="  -s $maven_settings"
                                echo "mvn_shell is ${mvn_shell}"
                                sh "${mvn_shell}"
                            }
				}
			}
            post{
                failure{
                    script{

                        def subject = env.email_unite_test_subject ? "[Jenkins]${env.email_unite_test_subject}" : "[Jenkins]单元测试失败-${env.JOB_NAME}"
                        def to = env.email_unite_test_recipients ? "${env.email_unite_test_recipients}" : "heweiwei@hd123.com"
                        def body = env.email_unite_test_body ? "${env.email_unite_test_body}" : "${env.JOB_NAME}单元测试失败,更多信息请查阅：${BUILD_URL}"
                        // send email
                        emailext subject: subject, to: to, body:body,attachLog:true
                    }
                }
            }
		}
        stage('maven denpendency check'){
			steps{
				script{
                    def mvn_shell="mvn "
                    if (env.mvn_pom){
                        mvn_shell+=" -f "+env.mvn_pom+" "+" dependency:list "
                        }
                    else{
                        mvn_shell+=" dependency:list "
                        }
                    echo "mvn_configfile is ${mvn_configfile}"
                    configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                            mvn_shell+="  -s $maven_settings"
                            echo "maven denpendency check is ${mvn_shell}"
                            sh "${mvn_shell}"
                        }
                    echo "BUILD_URL:${BUILD_URL}"
                    withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        echo "maven denpendency check"
                        // sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_dependency_check --jenkins_url ${BUILD_URL} --isrelease False --pomfile /opt/effectivepom.xml --configfile http://github.app.hd123.cn:10080/qianfanops/toolset/raw/develop/check/maven_check_dependency.yaml"
                    }
				}
			}
		}
        stage('打包静态资源'){
			steps{
				script{
				    if (env.packageRemoteJob != "" && env.packageRemoteJob != null) {
						echo "subsystem:${subsystem}"
						echo "BUILD_URL:${BUILD_URL}"
						def now = new Date()
						def fromVersion = ""
						if (env.fromVersion){
						    fromVersion =env.fromVersion
						}else{
						    fromVersion =now.format("yyyyMMdd", TimeZone.getTimeZone('UTC'))
						}
						echo "fromVersion:${fromVersion}"
						def toVersion=""
						if (env.toVersion){
						    toVersion =env.toVersion
						}else{
						    toVersion =build_branch
						}
						echo "toVersion:${toVersion}"
						if (env.__subsystem){
						    build job: "${packageRemoteJob}", parameters: [string(name: 'DNET_PRODUCT', value: DNET_PRODUCT), string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: __subsystem), string(name: 'BUILD_URL', value: BUILD_URL), string(name: 'fromVersion', value: fromVersion), string(name: 'toVersion', value: toVersion), string(name: 'branch', value: build_branch)], wait: true
						}else{
						    build job: "${packageRemoteJob}", parameters: [string(name: 'DNET_PRODUCT', value: DNET_PRODUCT), string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'BUILD_URL', value: BUILD_URL), string(name: 'fromVersion', value: fromVersion), string(name: 'toVersion', value: toVersion), string(name: 'branch', value: build_branch)], wait: true
						}

					}
				}
			}
		}
        stage('部署静态资源'){
		    when {
			    expression {build_branch ==~ /(develop)/ }
			}
			steps{
					script{
					    if (env.uploadRemoteJob != "" && env.uploadRemoteJob != null) {
							echo "subsystem:${subsystem}"
							def oss_resources=""
							oss_resources = env.subsystem + "_resources_" + env.fromVersion+ "_" + env.toVersion + "_" + env.build_branch + ".zip"
							echo "oss_resources:${oss_resources}"
                            if (env.__subsystem){
                                build job: "${uploadRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: __subsystem), string(name: 'oss_resources', value: oss_resources)], wait: false
                            }else{
                                build job: "${uploadRemoteJob}", parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'subsystem', value: subsystem), string(name: 'oss_resources', value: oss_resources)], wait: false
                            }
						}
				}
			}
		}
        stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        echo "using mvn "
                        //ImageVersion = readMavenPom().getVersion()
                        ImageVersion = readMavenPom().version
                        echo("ImageVersion=${ImageVersion}")
                        // remote_env
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        def image = env.image
                        def gitpath = env.gitpath
                        if (env.gitpath == "" || env.gitpath == null || env.gitpath == "None" || env.gitpath == "none") {
                            echo("gitpath 为空，从 pom 中读取 images")
                            image = readFile 'envfile_images.txt'
                            gitpath = "None"
                            echo("from envfile_images.txt : ${image}")
                        }
                        echo("image=`${image}`")
                        if (image != "" && image != "\n" && image != null) {
                            data.each{ i ->
                                String[] item = i.split(';')
                                println(item)
                                remoteJenkins = item[0]
                                remoteJob = item[1]
                                DNET_PROFILE = item[2]
                                if (item.size() > 3)  {
                                    DNET_PRODUCT=item[3]
                                }
                                echo "remoteJenkins is ${remoteJenkins}"
                                echo "remoteJob is ${remoteJob}"
                                echo "DNET_PROFILE is ${DNET_PROFILE}"
                                echo "DNET_PRODUCT is ${DNET_PRODUCT}"
                                // env
                                triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """DNET_PROFILE=${DNET_PROFILE}
    DNET_PRODUCT=${DNET_PRODUCT}
    image=${image}
    version=${ImageVersion}
    gitpath=${gitpath}
    sourcefrom=git
        """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                            }
                        }
				    }
				}
			}
		}
        stage('deploy'){
			steps{
				script{
				    if (env.remote_deploy_cfg != "" && env.remote_deploy_cfg != null) {
						// remote_deploy
                        println(env.remote_deploy_cfg)
                        String[] data = env.remote_deploy_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            DNET_PROFILE = item[2]
                            if (item.size() > 3)  {
                                DNET_PRODUCT=item[3]
                            }
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            echo "DNET_PROFILE is ${DNET_PROFILE}"
                            echo "DNET_PRODUCT is ${DNET_PRODUCT}"
                            // deploy
                            triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """DNET_PROFILE=${DNET_PROFILE}
DNET_PRODUCT=${DNET_PRODUCT}
subsystem=${subsystem}
skipversion=${skipversion}
skipversionupdate=${skipversionupdate}""", remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
                    }
				}
			}
		}
    }
    post{
        success{
            script{
                if (env.post_shell){
                    sh """
                    ${env.post_shell}
                    """
                }
                if (env.post_build_cfg != "" && env.post_build_cfg != null) {
                    // post_build
                    println(env.post_build_cfg)
                    String[] data = env.post_build_cfg.split('&')
                    println(data)
                    count = data.size()
                    tasks = [:]
                    data.each{ i ->
                        String[] item = i.split(';')
                        println(item)
                        // remoteJenkins = item[0]
                        // remoteJob = item[1]
                        // DNET_PROFILE = item[2]
                        postBuildJob = item[0]
                        build_branch = item[1]
                        echo "postBuildJob is ${postBuildJob}"
                        echo "build branch is ${build_branch}"
                        // post_build
                        build job: "${postBuildJob}", parameters: [string(name: 'build_branch', value: build_branch)], wait: false
                    }
                }
            }
        }
    }
}
