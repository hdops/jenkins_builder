def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def docker_args="-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker"
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository+":/hdapp/java"
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}


def credentialsId="qianfan"
 

pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            args "${docker_args}"
          }}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('deploy'){
			steps{
				script{
                    // read loop cfg
                    data = readYaml text: "${remote_deploy_cfg}"
                    println(data)
                    count = data.size()
                    tasks = [:]
                    def i = 0
                    for(i = 0; i < count; i = i + 1){
                        remoteJenkins = data[i].remoteJenkins
                        remoteJob = data[i].remoteJob
                        tasks[remoteJenkins] = {
                            stage("${remoteJob}") {
                                steps {
                                    echo "remoteJenkins is ${remoteJenkins}"
                                    echo "remoteJob is ${remoteJob}"
                                    triggerRemoteJob job: "${remoteJob}", maxConn: 1, parameters: '''DNET_PROFILE=${DNET_PROFILE}
    subsystem=${subsystem}
    skipversion=${skipversion}''', remoteJenkinsName: "${remoteJenkins}", useCrumbCache: true, useJobInfoCache: true
                                }
                            }
                        }
                    }
                    parallel tasks
				}
			}
		}
    }
    post{
        success{
            script{
                if (env.post_shell){
                    sh """
                    ${env.post_shell}
                    """
                }
            }
        }
        failure{
            script{

                def subject = env.email_subject ? "${env.email_subject}" : "failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "heweiwei@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME}"
                // send email
                emailext subject: subject, to: to, body:body,attachLog:true
            }
        }
    }
}