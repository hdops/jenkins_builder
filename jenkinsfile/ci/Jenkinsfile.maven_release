def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def docker_args="-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker"
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository+":/hdapp/java"
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}


def credentialsId="qianfan"
 

pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            args "${docker_args}"
          }}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }  
        stage('checkout') {
            steps{
                echo "branchName is ${params.branchName}"
                echo "releaseVersion is ${params.releaseVersion}"
                echo "developmentVersion is ${params.developmentVersion}"
                git branch: "${params.branchName}", credentialsId: "${credentialsId}", url: "http://github.app.hd123.cn:10080/${git_project}.git"
            }
        }  
		stage('build') {
		    steps{
				script{  
						def mvn_shell="mvn "
                        // release:prepare -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${developVersion}  release:perform
						def mvn_goals=" release:prepare -DreleaseVersion=${params.releaseVersion} -DdevelopmentVersion=${params.developVersion}  release:perform "
                        if (env.mvn_profile){
                            mvn_goals+=" "+env.mvn_profile
                            }
                        if (env.mvn_pom){
                            mvn_shell+=" -f "+env.mvn_pom+" "+mvn_goals
                            }
                        else{
                            mvn_shell+=mvn_goals
                            }
                        if (env.mvn_release_options){
                            echo "mvn_release_options is ${mvn_release_options}" 
                            //  -Darguments="-Dmaven.test.skip=true -Dmaven.javadoc.skip=true"
                            mvn_shell+=' -Darguments="-Dmaven.test.skip=true -Dmaven.javadoc.skip=true"'
                            } 
                        if (env.mvn_configfile){
                            echo "mvn_configfile is ${mvn_configfile}" 
                            configFileProvider([configFile(fileId:env.mvn_configfile, targetLocation: '/hdapp/java/.m2/repository/settings.xml')]) {
                                mvn_shell+="  -s /hdapp/java/.m2/repository/settings.xml"
                                echo "mvn_shell is ${mvn_shell}" 
                                // sh "${mvn_shell}" 
                                } 
                            } 
                        else{
                            echo "mvn_shell is ${mvn_shell}" 
                            // sh "${mvn_shell}" 
                            }
				}
			} 
		}
    }
}