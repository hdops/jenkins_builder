def node=""
if (env.node){
    node =env.node
}else{
    node ="release"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def ci_git_server_baseurl= "http://github.app.hd123.cn:10080"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}

def docker_args="--rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --add-host=maven.qianfan123.com:172.17.0.82 --add-host=apidoc.hd123.com:172.17.10.53 --add-host=github.app.hd123.cn:172.17.10.58 --add-host=gitlab.hd123.com:172.17.12.219 "
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}

def source_code_management=""
if (env.source_code_management){
    source_code_management =env.source_code_management
}else{
    source_code_management ="git"
}

def mvn_configfile="jdk8"
if (env.mvn_configfile){
    mvn_configfile =env.mvn_configfile
}

def credentialsId="appGitLab"
def toolset_image_version="0.3.0"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def pub2_wiki="False"
if (env.pub2_wiki){
    pub2_wiki=env.pub2_wiki
}
def pub2_octopus="False"
if (env.pub2_octopus){
    pub2_octopus=env.pub2_octopus
}

pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            label node
            args "${docker_args}"
          }}
    options {
	    timeout(time: 2, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }  
        stage('checkout') {
            steps{
                script{
                    if (source_code_management == "git"){
                        echo "checkout ${ci_git_server_baseurl}/${git_project}.git  branch:${build_branch}"
                        retry(5){
                            checkout([$class: 'GitSCM', branches: [[name: "*/${build_branch}"]],userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "${ci_git_server_baseurl}/${git_project}.git"]],extensions: [[$class: 'LocalBranch', localBranch: "${build_branch}"]]])
                        }
                    } else if (source_code_management == "svn"){
                        echo "http://hddenv/svn/${svn_project}/${build_branch}"
                        retry(5){
                            checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: false, credentialsId: 'hddenv', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: "http://hddenv/svn/${svn_project}/${build_branch}"]], quietOperation: true, workspaceUpdater: [$class: 'CheckoutUpdater']])
                        }
                    }
                }
            }
        }
        stage('pre-build-1') {
            steps{
                script{
                    echo "执行`mven help:effective-pom`,生成effectivepom.xml"
                    def mvn_shell="mvn help:effective-pom -Doutput=effectivepom.xml"
                    configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                        mvn_shell+=" -s $maven_settings"
                        echo "mvn_shell is ${mvn_shell}"
                        sh "${mvn_shell}"
                    }
                }
            }
        }
        stage('pre-build-2') {
            steps{
                 script {
                    withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt --add-host=apidoc.hd123.com:172.17.10.53", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        echo "服务白名单检查"
                        //sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_docker_check --pomfile /opt/effectivepom.xml --configfile http://github.app.hd123.cn:10080/qianfanops/toolset/raw/develop/check/maven_check_dependency.yaml"
                        sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_docker_check --pomfile /opt/effectivepom.xml "
                        sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_enforcer_check --pomfile /opt/pom.xml --outputfile /opt/maven_enforce.xml"
                    }
                 }
            }
        }
        stage('pre-build-3') {
            steps{
                 script {
                    if (env.mvn_pom){
                        if (env.mvn_pom=='pom.xml'){
                            pom_path=" --pompath "+env.mvn_pom
                        }
                        else{
                            root_dir=env.mvn_pom.split('pom.xml')[0]+"/"
                            echo "切换目录"+root_dir
                            dir(root_dir){
                                echo "执行`mven help:effective-pom`,生成"+root_dir+"/effectivepom.xml"
                                def mvn_shell="mvn help:effective-pom -Doutput=effectivepom.xml"
                                configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                                    mvn_shell+=" -s $maven_settings"
                                    echo "mvn_shell is ${mvn_shell}"
                                    sh "pwd"
                                    sh "${mvn_shell}"
                                }
                                pom_path=" --pompath "+env.mvn_pom+" --pomfile /opt/"+root_dir+"effectivepom.xml"
                            }
                        }
                    }
                    else{
                        pom_path=""
                    }
                    withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        echo "服务META-INF检查"
                        sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_meta_inf_check ${pom_path}"
                    }
                 }
            }
        }
        stage('pre-build-mvn-enforcer') {
            steps{
                script{
                    def mvn_shell="mvn validate -f maven_enforce.xml"
                    configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                        mvn_shell+=" -s $maven_settings"
                        echo "mvn_shell is ${mvn_shell}"
                        sh "${mvn_shell}"
                    }
                }
            }
        }
		stage('build') {
		    steps{
				script{  
						def mvn_shell="mvn "
                        // release:prepare -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${developVersion}  release:perform
						def mvn_goals=" release:prepare -DreleaseVersion=${params.releaseVersion} -DdevelopmentVersion=${params.developVersion}  release:perform "
                        if (env.mvn_profile){
                            mvn_goals+=" "+env.mvn_profile
                            }
                        if (env.mvn_pom){
                            mvn_shell+=" -f "+env.mvn_pom+" "+mvn_goals
                            }
                        else{
                            mvn_shell+=mvn_goals
                            }
                        if (env.mvn_release_options == null){
                            env.mvn_release_options = '-Pdocker -Darguments="-Dmaven.test.skip=true -Dmaven.javadoc.skip=true"'
                            echo "mvn_release_options is ${mvn_release_options}"
                            }
                        mvn_shell+=env.mvn_release_options
                        echo "mvn_configfile is ${mvn_configfile}"
                        configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                                mvn_shell+="  -s $maven_settings"
                                echo "mvn_shell is ${mvn_shell}"
                                sh "git config credential.helper store"
                                sh "git config  user.email appGitLab@hd123.com"
                                sh "git config  user.name appGitLab"
                                sh "${mvn_shell}"
                            }
				}
			} 
		}
        stage('maven denpendency check'){
			steps{
				script{
                    def mvn_shell="mvn "
                    if (env.mvn_pom){
                        mvn_shell+=" -f "+env.mvn_pom+" "+" dependency:list "
                    }
                    else{
                        mvn_shell+=" dependency:list "
                    }
                    echo "mvn_configfile is ${mvn_configfile}"
                    configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                            mvn_shell+="  -s $maven_settings ||echo "
                            echo "maven denpendency check is ${mvn_shell}"
                            sh "${mvn_shell}"
                        }
                    echo "BUILD_URL:${BUILD_URL}"
                    withDockerContainer(args: "--rm -v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}") {
                        echo "maven denpendency check"
                        sh "DNET_PRODUCT=dnet DNET_PROFILE=integration_test hdmon maven_dependency_check --jenkins_url ${BUILD_URL} --isrelease True"
                    }
				}
			}
		}
        stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        echo "using mvn "
                        // ImageVersion = readMavenPom().version
                        ImageVersion = "${params.releaseVersion}"
                        echo("ImageVersion=${ImageVersion}")
                        // remote_env
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        def image = env.image
                        def gitpath = env.gitpath
                        if (env.gitpath == "" || env.gitpath == null || env.gitpath == "None" || env.gitpath == "none") {
                            echo("gitpath 为空，从 pom 中读取 images")
                            image = readFile 'envfile_images.txt'
                            gitpath = "None"
                            echo("from envfile_images.txt : ${image}")
                        }
                        echo("image=`${image}`")
                        if (image != "" && image != "\n" && image != null) {
                            data.each{ i ->
                                String[] item = i.split(';')
                                println(item)
                                remoteJenkins = item[0]
                                remoteJob = item[1]
                                DNET_PROFILE = item[2]
                                if (item.size() > 3)  {
                                    DNET_PRODUCT=item[3]
                                }
                                echo "remoteJenkins is ${remoteJenkins}"
                                echo "remoteJob is ${remoteJob}"
                                echo "DNET_PROFILE is ${DNET_PROFILE}"
                                echo "DNET_PRODUCT is ${DNET_PRODUCT}"
                                // env
                                triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """DNET_PROFILE=${DNET_PROFILE}
    DNET_PRODUCT=${DNET_PRODUCT}
    image=${image}
    version=${ImageVersion}
    gitpath=${gitpath}
    sourcefrom=git
        """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                            }
                        }
				    }
				}
			}
		}
        stage('pub2wiki'){
            when {
                beforeAgent true
                environment name: 'pub2_wiki', value: 'True'
            }
            steps{
                script{
                    withDockerContainer(image: "harborka.qianfan123.com/component/dops-release:latest", args: "-v ${WORKSPACE}/:") {
                        pom = readMavenPom file: 'pom.xml'
                        def data = "{\"projectName\":\"${pom.groupId}:${pom.artifactId}\",\"version\": \"${releaseVersion}\",\"cdd\": {"
                        
                        dirs=sh(returnStdout: true, script: "ls .").split('\n')
                        dirs.each{ i ->
                            out = sh(script: "[ -f ${i}/src/main/resources/META-INF/cdd.yml ] && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                            if ( out == "true" ) {
                                print "find ${i} has cdd.yml"
                                xml = readMavenPom file: "${i}/pom.xml"
                                data += "\"${xml.artifactId}\":\"${i}/src/main/resources/META-INF/cdd.yml\","
                            }
                        }
                        data = "java -jar dops-release wiki '" + data[0..-2] + "}}'"
                        print data
                    }
                }
            }
        }
        stage('pub2octopus'){
            when {
                beforeAgent true
                environment name: 'pub2_octopus', value: 'True'
            }
            steps{
                script{
                    print 1
                }
            }
        }
    }
}
