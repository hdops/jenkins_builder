def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
if (env.build_branch == null){
    env.build_branch = "develop"
}
if (env.releaseBranchName == null){
    env.releaseBranchName = "release"
}

def maven_image=""
if (env.maven_image){
    maven_image =env.maven_image
}else{
    maven_image ="harbor.qianfan123.com/base/maven:3.3.9_jdk8"
}

def docker_args="-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker"
if (env.maven_repository){
    docker_args+=" -v "+env.maven_repository+":/hdapp/java"
}else{
    docker_args+=" -v /hdapp/java:/hdapp/java"
}

def mvn_configfile="jdk8"
if (env.mvn_configfile){
    mvn_configfile =env.mvn_configfile
}

def credentialsId="qianfan"


pipeline {
    // agent {label node}
    agent {docker {
            image "${maven_image}"
            args "${docker_args}"
          }}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    }
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('checkout') {
            steps{
                echo "checkout http://github.app.hd123.cn:10080/${git_project}.git  branch:${build_branch}"
                checkout([$class: 'GitSCM', branches: [[name: "*/${build_branch}"]],userRemoteConfigs: [[credentialsId: 'qianfan',url: "http://github.app.hd123.cn:10080/${git_project}.git"]]])
            }
        }
        stage('switch') {
            steps{
                sh """export HOME=/root
git config --global credential.helper store

git checkout ${releaseBranchName}
git pull
git checkout develop
git branch -d ${releaseBranchName}
git push origin :${releaseBranchName}

git checkout develop"""
            }
		stage('build') {
		    steps{
				script{
						def mvn_shell="mvn "
                        if (env.mvn_pom){
                            mvn_shell+=" -f "+env.mvn_pom+" clean release:branch -DbranchName=${releaseBranchName} -DupdateBranchVersions=true -DupdateWorkingCopyVersions=true -DdevelopmentVersion=${developVersion} -DreleaseVersion=${releaseVersion}"
                        }
                        else{
                            mvn_shell+="clean release:branch -DbranchName=${releaseBranchName} -DupdateBranchVersions=true -DupdateWorkingCopyVersions=true -DdevelopmentVersion=${developVersion} -DreleaseVersion=${releaseVersion}"
                        }
                        echo "mvn_configfile is ${mvn_configfile}"
                        configFileProvider([configFile(fileId:mvn_configfile, variable: 'maven_settings')]) {
                                mvn_shell+="  -s $maven_settings"
                                echo "mvn_shell is ${mvn_shell}"
                                // sh "${mvn_shell}"
                        }
				}
			}
		}
    }
    post{
        success{
            script{
                if (env.post_shell){
                    sh """
                    ${env.post_shell}
                    """
                }
            }
        }
        failure{
            script{

                def subject = env.email_subject ? "${env.email_subject}" : "failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "heweiwei@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME}"
                // send email
                emailext subject: subject, to: to, body:body,attachLog:true
            }
        }
    }
}