def node="master"
if (env.node){
    node =env.node
}

def credentialsId="qianfan"

//  主要需要 git + dokcer 环境
def build_image= "harbor.qianfan123.com/base/golang:1.14.2"
if (env.build_image){
    build_image =env.build_image
}

def git_base_rul= "http://github.app.hd123.cn:10080"
if (env.git_base_rul){
    git_base_rul =env.git_base_rul
}

pipeline {
    // agent {label node}
    agent {
		docker {
            image "${build_image}"
            label node
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /root/.docker/config.json:/root/.docker/config.json'
          }
	}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace'){
		    when {
			    expression {'Y' == "${params.deleteWorkspace}"}
			}
			steps{
			    deleteDir()
			}
		}
         stage('checkout') {
             steps{
                script {
                    echo "checkout ${git_base_rul}/${git_project}.git  branch:${build_branch}"
                    checkout([$class: 'GitSCM', branches: [[name: '*/${build_branch}']],userRemoteConfigs: [[url: '${git_base_rul}/${git_project}.git',credentialsId: "${credentialsId}"]]])
                }
             }
         }  
		stage('build') {
		    steps{
				script{
					sh "docker -v"
					echo "build_image is ${build_image}"
					docker_build_shell = "make all"
					sh "${docker_build_shell}"
				}
			} 
		}
        stage('env'){
			steps{
				script{
				    if (env.remote_env_cfg != "" && env.remote_env_cfg != null) {
                        File file = new File("${WORKSPACE}/VERSION")
                        ImageVersion = file.text
                        echo("ImageVersion=${ImageVersion}")
                        // remote_env
                        println(env.remote_env_cfg)
                        String[] data = env.remote_env_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            // env
                            triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """image=${image}
version=${ImageVersion}
    """, remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
				    }
				}
			}
		}
        stage('deploy'){
			steps{
				script{
				    if (env.remote_deploy_cfg != "" && env.remote_deploy_cfg != null) {
						// remote_deploy
                        println(env.remote_deploy_cfg)
                        String[] data = env.remote_deploy_cfg.split('&')
                        println(data)
                        count = data.size()
                        tasks = [:]
                        data.each{ i ->
                            String[] item = i.split(';')
                            println(item)
                            remoteJenkins = item[0]
                            remoteJob = item[1]
                            echo "remoteJenkins is ${remoteJenkins}"
                            echo "remoteJob is ${remoteJob}"
                            // deploy
                            triggerRemoteJob job: "${remoteJob}", maxConn: 3, parameters: """subsystem=${subsystem}""", remoteJenkinsName: "${remoteJenkins}", useCrumbCache: false, useJobInfoCache: false, enhancedLogging: true
                        }
                    }
				}
			}
		}
    }
}