def node="master"
if (env.node){
    node =env.node
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
	agent {
			    docker {
			    label node
			    image "harbor.qianfan123.com/toolset/toolsetcore:0.3.0"
			    args '--rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
			    }
             }
    options {
	    timeout(time: 1, unit: 'HOURS')
    } 
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('download_toolset'){
			steps{
			    script{
					if(env.on_k8s == 'True'){
						container("hdtoolsetcore"){
							retry(2){
								sh "TRUST_PUBLIC_IP=true DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch develop -p ."
							}
							sh "tar zxf toolset.tar.gz -C $WORKSPACE"
						}
					}else {
						retry(2){
							sh "TRUST_PUBLIC_IP=true DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch develop -p ."
						}
						sh "tar zxf toolset.tar.gz -C $WORKSPACE"
					}
				}
			}
		}
        stage('etl_external_resource'){ 
			steps{
			    script{
					if(env.on_k8s == 'True'){
						container("hdtoolsetcore"){
							echo "jenkins_build_url is ${params.jenkins_build_url}"
							sh "hdmon etl_external_resource --jenkins_url ${params.jenkins_build_url} " 
						}
					}else {
						echo "jenkins_build_url is ${params.jenkins_build_url}"
						sh "hdmon etl_external_resource --jenkins_url ${params.jenkins_build_url} " 
					}
				}
			}
		}
    }
}