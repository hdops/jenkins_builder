def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
pipeline {
    agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
        // DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
        // DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	    // choice(name: 'DNET_PRODUCT', choices:'baas')
	    // choice(name:'DNET_PROFILE', choices:'integration_test\nessp_branch\nbranch_test\nperformance_test\ntencent-int')
	    // string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	    // string(name: 'subsystem', defaultValue: 'dss', description: '子系统，多值以逗号分隔，例如ras,sas,sas_config,tlsp-web,waltz_account,tlsp,spms_web_ui,spms,spms_h3_transfer,pas,zuul,eureka,mq,account,config,sequence',trim: true)
	    // string(name: 'action', choices: 'up\ndown', description: 'up or down',trim: true)
	// }
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('download toolset') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "toolset path is ${WORKSPACE}"
							echo "sub systems are ${params.subsystem}"
							echo "skip version is ${params.skipversion}"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
						}
					}else {
						echo "active profile is ${params.DNET_PROFILE}"
						echo "toolset path is ${WORKSPACE}"
						echo "sub systems are ${params.subsystem}"
						echo "skip version is ${params.skipversion}"
						retry(2){
							sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
						}
						sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
					}
				}
			}
        }
		stage('grayscale publish down up'){
			steps{
				script {
					if (env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops grayscale_publish --subsystem ${params.subsystem} --action ${params.action}"
						}
					}else {
						sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops grayscale_publish --subsystem ${params.subsystem} --action ${params.action}"
					}
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.skipversion}"
			}
		}
    }
}
