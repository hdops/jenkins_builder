def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    agent {label node}
    options {
	    timeout(time: 1, unit: 'HOURS')
    }
	stages {
	    stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('update toolset image') {
			steps{
                script {
                    if(env.on_k8s == 'True'){
                        echo "kubernetes do not need update"
                    }else {
                        echo "start"
                        echo "workspace is $WORKSPACE"
                        retry(2){
                            sh "docker pull harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}"
                        }
                    }
                }
			}
        }
        stage('delete toolset error docker') {
			steps{
                script {
                    if(env.on_k8s == 'True'){
                        echo "kubernetes do not need delete"
                    } else {
                        out = sh(script: "docker ps -a | grep harbor.qianfan123.com/toolset/toolsetcore:0.3.0 | grep -v Up | awk '{print \$1}'", returnStdout: true)
                        String[] dockerlist = out.split('\n')
                        for ( String i : dockerlist ){
                            sh "docker ps -a | grep ${i}"
                            sh "docker rm ${i}"
                        }
                    }
                }
			}
        }
	}
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

