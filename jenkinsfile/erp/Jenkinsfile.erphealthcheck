def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def mysh(cmd, returnStatus) {
    return sh (script: '#!/bin/sh -e\n'+ cmd, returnStatus: returnStatus)
}
def git_base_url=""
if (env.git_base_url){
    git_base_url =env.git_base_url
}else{
    git_base_url ="http://github.app.hd123.cn:10080"
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    agent {label node}
    options {  
	    timeout(time: 1, unit: 'HOURS')
    }                          
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('healthcheck-app'){
            steps {
                 script {
                        mysh ('sudo wget -qO /hdapp/ka_healthcheck.sh http://ka-storage.oss-cn-hangzhou.aliyuncs.com/cd_new/ka_healthcheck.sh', false)
                        mysh ("sudo sed -i 's%http://github.app.hd123.cn:10080%${git_base_url}%' /hdapp/ka_healthcheck.sh", false)
                        mysh ('sudo sh /hdapp/ka_healthcheck.sh ${toolset_x}', false)
                }
            }
        }
    }
	post {

    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
