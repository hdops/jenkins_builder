def node="master"
if (env.node){
    node =env.node
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

def git_base_url="http://github.app.hd123.cn:10080"
if (env.git_base_url){
    git_base_url =env.git_base_url
}
def GIT_BRANCH="erp"
if (env.GIT_BRANCH){
    GIT_BRANCH=env.GIT_BRANCH
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
 
// qianfanops/toolset
def git_project = "xxx"
if (env.git_project){
   git_project = env.git_project
}

def docker_image="harborka.qianfan123.com/component/ka-toolset-runenv:20230214"
if (env.docker_image){
   docker_image = env.docker_image
}

pipeline {
    agent {label node}
    options {
	    timeout(time: 1, unit: 'HOURS')
    }                          
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        } 
        stage('checkout'){
            steps {
                retry(3){
			    	checkout([$class: 'GitSCM', branches: [[name: "*/${GIT_BRANCH}"]],extensions: [[$class: 'CloneOption', depth: 1, shallow: true]], userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "${git_base_url}/${git_project}.git"]]])
				}
            }
        }

        stage('pytest in docker') {
            steps{
                script {
                    sh "docker pull ${docker_image}"
                    withDockerContainer(args: "-v /root/.ssh:/root/.ssh", image: "${docker_image}") {  
						sh "ln -s ${WORKSPACE} /opt/ka-toolset && cd /opt/ka-toolset"
						def pytest_shell="pytest tests/ --junitxml=junit.xml -sv --capture sys"
						if (env.pytest_shell){
						  pytest_shell=env.pytest_shell
						}
						echo "pytest_shell is ${pytest_shell}"
						sh "${pytest_shell}"
                    }
                }
            }
        }
    }
	post {
        always {
			script {
				archiveArtifacts allowEmptyArchive: true, artifacts: '*', followSymlinks: false
                currentBuild.description = "pytest"
			}
		}
        failure{
            script{
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "heweiwei@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext subject: subject, to: to, body:body,attachLog:true
            }
        }
        fixed{
            script{
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]fixed on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "heweiwei@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "fixed on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext subject: subject, to: to, body:body,attachLog:true
            }
        }
    }
}
