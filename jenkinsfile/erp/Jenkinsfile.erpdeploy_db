def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def mysh(cmd, returnStatus) {
    return sh (script: '#!/bin/sh -e\n'+ cmd, returnStatus: returnStatus)
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    agent {label node}
    options {  
	    timeout(time: 1, unit: 'HOURS')
    }                          
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('deploy-app'){
            steps {
				mysh (""" ${deploy_shell} || error=true && ${filearch_shell}\n
                       if [ $error ]; then  exit -1;fi """,false)
            }
        }
    }
	post {
        always {
			script {
				archiveArtifacts allowEmptyArchive: true, artifacts: '*.log', followSymlinks: false
				currentBuild.description = "${params.appname}:${params.version}:${params.mode}"
			}
		}
    }
}
