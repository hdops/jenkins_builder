def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def mysh(cmd, returnStatus) {
    return sh (script: '#!/bin/sh -e\n'+ cmd, returnStatus: returnStatus)
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
pipeline {
    agent {label node}
    options {  
	    timeout(time: 1, unit: 'HOURS')
    }                          
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('download toolset_x') {
            steps{
                withCredentials([usernamePassword(credentialsId: "${credentialsId}", usernameVariable: 'username', passwordVariable: 'password')]){
                       mysh ('''ssh $host sudo "echo 'http://$username:$password@github.app.hd123.cn:10080\nhttps://$username:$password@gitlab.hd123.com' > /opt/.hdgit" ''', false)
            }
		}
      }
        stage('generate-report'){
            steps {
                mysh ('ssh $host sudo wget -qO /hdapp/gen_cruise_report.sh http://ka-storage.oss-cn-hangzhou.aliyuncs.com/cd_new/gen_cruise_report.sh', false)
                mysh ('ssh $host sudo sh /hdapp/gen_cruise_report.sh ${toolset_x} $project', false)
                mysh ('scp -rp $host:/hdapp/${toolset_x}/project/*gz .', true)
            }
        }
    }
	post {
        always {
			script {
				archiveArtifacts allowEmptyArchive: true, artifacts: '*', followSymlinks: false
                currentBuild.description = "${params.project}"
			}
		}
    }
}
