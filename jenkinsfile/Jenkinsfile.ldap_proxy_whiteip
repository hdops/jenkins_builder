def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="False"
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
env.proxy_name="haproxy.service"
env.proxy_host="172.17.12.219"

def push_config = {
    sh '''set +x;
    scp ${WORKSPACE}/whiteip.lst ${proxy_host}:/hdapp/haproxy_ldap \
    && ssh ${proxy_host} systemctl reload ${proxy_name}
    '''  
}

pipeline {
    agent {label node}                
    stages {
	    stage('更新本地配置') {
			steps{
                script{
                    deleteDir()
                    retry(3){
                        checkout([$class: 'GitSCM', branches: [[name: "*/develop"]],userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "https://gitlab.hd123.com/qianfanops/ldap_proxy.git"]]])
                    }
                    push_config()
                }  
            }
		}
        stage('检测服务状态') {
            steps{
                 script {
                        echo "等待服务重载..."
                        sh "set +x;sleep 3"
                        def proxy_status=sh(script: "set +x;ssh ${proxy_host} systemctl status ${proxy_name}|grep Active|cut -d'(' -f1|cut -d':' -f2|sed 's/^[ ]*//g'", returnStdout:true).trim()
                        if(proxy_status != 'active'){
                            echo "配置有误或服务异常,已回退配置到上个版本;请检查修复并重新提交."
                            retry(2){
                                sh '''set +x;cd $WORKSPACE && git reset --hard HEAD^ &>/dev/null''' 
                            }
                            push_config()
                            sh 'exit 1'                 
                        } else {
                            echo "服务正常;已增加新IP至白名单"
                        }
                 }
            }
        }
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
                updateGitlabCommitStatus name: 'build', state: 'failed'
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        success{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
    }
}
