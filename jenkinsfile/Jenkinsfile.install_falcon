// 该 pipeline 已过时
def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
pipeline {
   agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// parameters {
	//     string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	//     string(name: 'ssh_ip', defaultValue: '127.0.3.0-private,', description: 'ssh_host，必须以逗号结尾或分割',trim: true)
	//     string(name: 'ssh_port', defaultValue: '60501', description: 'ssh_port',trim: true)
	//     string(name: 'ssh_user', defaultValue: 'dnet', description: 'ssh_user',trim: true)
	//     string(name: 'rds_hostname', defaultValue: '', description: 'rds_hostname',trim: true)
	//     string(name: 'rds_port', defaultValue: '3306', description: 'rds_port',trim: true)
    //     string(name: 'rds_user', defaultValue: '', description: 'rds_user',trim: true)
    //     string(name: 'rds_password', defaultValue: '', description: 'rds_password',trim: true)
    //     string(name: 'falonredis_port', defaultValue: '6379', description: 'falonredis_port',trim: true)
    //     string(name: 'falcontransfer_8433port', defaultValue: '8433', description: 'falcontransfer_8433port',trim: true)
    //     string(name: 'falconapi_8080port', defaultValue: '8080', description: 'falconapi_8080port',trim: true)
    //     string(name: 'falconheartbeat_6030port', defaultValue: '6030', description: 'falconheartbeat_6030port',trim: true)
    //     string(name: 'falcondashboard_8081port', defaultValue: '8081', description: 'falcondashboard_8081port',trim: true)
	// }
    stages {
	    stage('delete workspace') {
			steps{
				deleteDir()
			}
	    }
		stage('download toolset') {
			steps{
				sh "git clone http://${GIT_USER}:${GIT_PASSWORD}@github.app.hd123.cn:10080/qianfanops/iac.git -b ${params.GIT_BRANCH} ."
			}
        }
        stage('install falcon') {
			steps{
			    sh "ansible-playbook -i ${params.ssh_ip} --extra-vars 'ansible_user=${params.ssh_user} ansible_port=${params.ssh_port} rds_hostname=${params.rds_hostname} rds_port=${params.rds_port} rds_user=${params.rds_user} rds_password=${params.rds_password} falonredis_port=${params.falonredis_port} falconplus_8433port=${params.falcontransfer_8433port} falconplus_8080port=${params.falconapi_8080port} falconplus_6030port=${params.falconheartbeat_6030port} falcondashboard_8081port=${params.falcondashboard_8081port}' hdiac/falcon/main.yml"
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}