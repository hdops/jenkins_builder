def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

pipeline {
    agent {label node}
	options {
	//    buildDiscarder(logRotator(numToKeepStr: '20'))
	//    disableConcurrentBuilds()
	//    disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
    //     DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
    //     DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	//    choice(name:'DNET_PROFILE', choices:'production')
	//    string(name: 'DNET_PRODUCT', defaultValue: 'dly')
	//   // choice(name: 'DINGTALK_TOKEN', choices: ['36bbaea49f5af51cbf7cbdc4b99487981c900f24dffed03ba1834304b1c4a280'])
	//    string(name: 'interval', defaultValue: '15m')
	//    string(name: 'receivers', defaultValue: 'gaoweizong@hd123.com')
	//    string(name: 'es_index', defaultValue: 'nginx_mbr')
	//    string(name: 'es_type', defaultValue: 'nginx_mbr')
	//    string(name: 'GIT_BRANCH', defaultValue: 'develop')
	// }
	// triggers {
    //     cron 'H/15 * * * *'
    //  }
    stages {
		stage('download toolset') {
			steps{
                retry(2){
				    sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                }
				sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
			}
        }
		stage('nginx accesslog status check') {
			// 多配置并行运行
			parallel {
				stage('check 499') {
					steps {
						sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdmon nginx_accesslog_status_check --query status=499 --interval ${params.interval} --receivers ${params.receivers} --es_index ${params.es_index} --es_type ${params.es_type}"
					}
				}
				stage('check 502') {
					steps {
						sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdmon nginx_accesslog_status_check --query status=502 --interval ${params.interval} --receivers ${params.receivers} --es_index ${params.es_index} --es_type ${params.es_type}"
					}
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

