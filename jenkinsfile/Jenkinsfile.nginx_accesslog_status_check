def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
pipeline {
    agent {label node}
	options {   
	    timeout(time: 3, unit: 'HOURS')
    }                 
    stages {
		stage('download toolset') {
			steps{
                retry(2){
				    sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                }
				sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
			}
        }
		stage('nginx accesslog status check') {
			// 多配置并行运行
			parallel {
				stage('check 499') {
					steps {
						sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdmon nginx_accesslog_status_check --query status=499 --interval ${params.interval} --receivers ${params.receivers} --es_index ${params.es_index} --es_type ${params.es_type}"
					}
				}
				stage('check 502') {
					steps {
						sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdmon nginx_accesslog_status_check --query status=502 --interval ${params.interval} --receivers ${params.receivers} --es_index ${params.es_index} --es_type ${params.es_type}"
					}
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

