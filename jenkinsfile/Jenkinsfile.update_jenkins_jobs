def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

if (env.job_update_script){
    env.job_update_script = env.job_update_script
}

def git_base_url="http://github.app.hd123.cn:10080"
if (env.git_base_url){
    git_base_url=env.git_base_url
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
def jenkins_job_config_file = 'jenkins_jobs.ini'
if (env.jenkins_job_config_file){
    jenkins_job_config_file = env.jenkins_job_config_file
}

pipeline {
    agent {label node}
	options {
	    timeout(time: 6, unit: 'HOURS')
    }
    stages {
        stage('git clone') {
			steps{
				script {
                    echo "workspace is $WORKSPACE"
                    git branch: "${params.GIT_BRANCH}", credentialsId: "${credentialsId}", url: "${git_base_url}/${GIT_GROUP}/${GIT_REPONAME}.git"
                    sh "cat ${jenkins_job_config_file}"
                    sh 'git submodule update --init --recursive'
                    sh '''git submodule foreach "git pull origin master" '''
                    }
                }
			}
		stage("build job"){
		  steps{
		    script{
                withDockerContainer(args: "-v ${WORKSPACE}/jenkins:/root/jenkins -v ${WORKSPACE}/${jenkins_jobs_ini_config}:/root/jenkins_jobs.ini", image: "harbor.qianfan123.com/base/jenkins-job-builder:0.1.0") {
                    echo "run unit test"
                    sh "pytest -m unit --junitxml=junit.xml -sv"
                }
		    }
		  }
		}
		stage("更新jenkins_jobs"){
            steps{
                script{
                    sh "set +x;sh ${WORKSPACE}/${env.job_update_script}"
                }
            }
		}
    }

    post{
        failure{
            script{
                updateGitlabCommitStatus name: 'build', state: 'failed'
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "buhaiqing@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext(recipientProviders: [[$class: 'DevelopersRecipientProvider']],subject: "${subject}", body: "${body}",attachLog:true)
            }
        }
        fixed{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]fixed on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "buhaiqing@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "fixed on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext(recipientProviders: [[$class: 'DevelopersRecipientProvider']],subject: "${subject}", body: "${body}",attachLog:true)
            }
        }
        success{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        always{
            script{
                junit allowEmptyResults: true, testResults: 'junit.xml'
            }
        }
    }
}
