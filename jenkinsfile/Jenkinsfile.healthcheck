def node="master"
if (env.node){
    node =env.node
}

def whether_post="True"
if (env.whether_post){
    whether_post =env.whether_post
}
pipeline {
    agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
        // DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
        // DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	    // choice(name:'DNET_PROFILE', choices:'integration_test\nessp_branch\nbranch_test\nperformance_test\ntencent-int')
	    // string(name: 'subsystem', defaultValue: 'dss', description: '子系统，多值以逗号分隔，例如ras,sas,sas_config,tlsp-web,waltz_account,tlsp,spms_web_ui,spms,spms_h3_transfer,pas,zuul,eureka,mq,account,config,sequence',trim: true)
	    // string(name: 'svnreversion', defaultValue: '', description: '上游job传入svn版本号，不需要人为填写',trim: true)
	    // string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	    // choice(name: 'TRUST_PUBLIC_IP', choices:'None\nTrue', description: 'None 表示用内网部署，True 表示用外网部署')
	    // choice(name: 'tag', choices:'None\nblue\ngreen')
	    // choice(name: 'DNET_PRODUCT', choices:'baas')
	// }
    stages {
		stage('healthcheck') {
			steps{
				script {
                    if (env.on_k8s){
                        container('hdtoolsetcore'){
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "svnreversion is ${params.svnreversion}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                                }
                            }else{
                                sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"  
                            }
                        }
                    }else {
                        //docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").pull()
                        //docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").withRun('-v /var/run/docker.sock:/var/run/docker.sock') {
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "svnreversion is ${params.svnreversion}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                                }
                            }else{
                                sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                            }
                        //}

                    }
                }
			}
        }
        
    }
	post {

    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
            script {
                archiveArtifacts allowEmptyArchive: true, artifacts: '**/need_restart_container.json'
                currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.tag}"
            }
        }
    }
}

