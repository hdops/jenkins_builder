def node="master"
if (env.node){
    node =env.node
}

def whether_post="True"
if (env.whether_post){
    whether_post =env.whether_post
}

def PRESET_IMAGE_VERSION="None"
if (env.PRESET_IMAGE_VERSION){
    PRESET_IMAGE_VERSION =env.PRESET_IMAGE_VERSION
}

def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}

if (!env.on_k8s){
    env.on_k8s="False"
}

if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

pipeline {
    agent {label node}
    options {
	    timeout(time: 1, unit: 'HOURS')
    }

    stages {
		stage('healthcheck') {
			steps{
				script {
                    if (env.on_k8s == 'True'){
                        container('hdtoolsetcore'){
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            sh "env"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${PRESET_IMAGE_VERSION} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                                }
                            }else{
                                sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${PRESET_IMAGE_VERSION} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                            }
                        }
                    }else {
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"

                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            if(env.retry_num){
                                def n ="${retry_num}".toInteger()
                                retry(n){
                                    sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${PRESET_IMAGE_VERSION} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                                }
                            }else{
                                sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${PRESET_IMAGE_VERSION} hdops health_check --subsystem ${params.subsystem}  --tag ${params.tag}"
                            }
                        }
                    }
                }
			}
        }
        
    }
	post {

    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
            script {
                archiveArtifacts allowEmptyArchive: true, artifacts: '**/need_restart_container.json'
                currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.tag}"
            }
        }
    }
}

