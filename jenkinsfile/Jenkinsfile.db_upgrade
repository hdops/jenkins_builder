def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline {
    agent {label node}
    options {  
	    timeout(time: 3, unit: 'HOURS')
    }                    
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('rds upgrade && logAnalysis') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "toolset path is ${WORKSPACE}"
							echo "sub systems are ${params.subsystem}"
							echo "skip version is ${params.skipversion}"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
							String[] data = []
                            if (PRESET_IMAGE_VERSION != 'None'){
                                data = PRESET_IMAGE_VERSION.split(',')
                            }else{
                                data = [PRESET_IMAGE_VERSION]
                            }
                            println(data)
                            data.each{ i ->
                                echo "======升级数据库到${i}版本======"
                                if (env.on_k8s){
                                    container("hdtoolsetcore"){
                                        sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} hdops deploy db_upgrade --subsystem ${params.subsystem} --stackids ${params.stackIds} --dblist ${params.dblist} ${params.skipversion} ${params.skipversionupdate} --receivers ${params.receivers} --timeout ${params.timeout} --threadcount ${params.threadcount} --nodethreadcount ${params.nodethreadcount}"
                                        sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} RECEIVERS_WHEN_SUCCEED=${params.RECEIVERS_WHEN_SUCCEED}  hdops deploy db_upgrade_check --url ${env.BUILD_URL} --receivers ${params.receivers} --buildurl ${env.BUILD_URL}"
                                    }
                                }else {
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} hdops deploy db_upgrade --subsystem ${params.subsystem} --stackids ${params.stackIds} --dblist ${params.dblist} ${params.skipversion} ${params.skipversionupdate} --receivers ${params.receivers} --timeout ${params.timeout} --threadcount ${params.threadcount} --nodethreadcount ${params.nodethreadcount}"
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} RECEIVERS_WHEN_SUCCEED=${params.RECEIVERS_WHEN_SUCCEED}  hdops deploy db_upgrade_check --url ${env.BUILD_URL} --receivers ${params.receivers} --buildurl ${env.BUILD_URL}"
                                }
                            }
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
					        echo "active profile is ${params.DNET_PROFILE}"
                            echo "toolset path is ${WORKSPACE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "skip version is ${params.skipversion}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            String[] data = []
                            if (PRESET_IMAGE_VERSION != 'None'){
                                data = PRESET_IMAGE_VERSION.split(',')
                            }else{
                                data = [PRESET_IMAGE_VERSION]
                            }
                            println(data)
                            data.each{ i ->
                                echo "======升级数据库到${i}版本======"
                                if (env.on_k8s){
                                    container("hdtoolsetcore"){
                                        sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} hdops deploy db_upgrade --subsystem ${params.subsystem} --stackids ${params.stackIds} --dblist ${params.dblist} ${params.skipversion} ${params.skipversionupdate} --receivers ${params.receivers} --timeout ${params.timeout} --threadcount ${params.threadcount} --nodethreadcount ${params.nodethreadcount}"
                                        sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} RECEIVERS_WHEN_SUCCEED=${params.RECEIVERS_WHEN_SUCCEED}  hdops deploy db_upgrade_check --url ${env.BUILD_URL} --receivers ${params.receivers} --buildurl ${env.BUILD_URL}"
                                    }
                                }else {
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} hdops deploy db_upgrade --subsystem ${params.subsystem} --stackids ${params.stackIds} --dblist ${params.dblist} ${params.skipversion} ${params.skipversionupdate} --receivers ${params.receivers} --timeout ${params.timeout} --threadcount ${params.threadcount} --nodethreadcount ${params.nodethreadcount}"
                                    sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${i} RECEIVERS_WHEN_SUCCEED=${params.RECEIVERS_WHEN_SUCCEED}  hdops deploy db_upgrade_check --url ${env.BUILD_URL} --receivers ${params.receivers} --buildurl ${env.BUILD_URL}"
                                }
                            }
					    }
					}
				}
			}
        }
	}
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.skipversion}"
			}
		}
    }
}
