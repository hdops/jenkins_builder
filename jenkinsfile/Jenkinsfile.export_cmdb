def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

pipeline {
    agent {label node}
    // options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
    // }
	// environment{
    //     DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
    //     DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	//     choice(name:'DNET_PROFILE', choices:'integration_test\ndev_test\nbranch_test\nproduction\nprd-guoda\nuat')
	//     choice(name:'DNET_PRODUCT', choices:'dnet\nbaas\ndly')
	//     string(name: 'toolset_x', defaultValue: '', description: '私有化toolset项目名',trim: true)
	//     string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	// }

	stages {
	    stage('delete workspace') {
			steps{
				deleteDir()
			}
        }
	    stage('导出cmdb数据') {
			steps{
				script {
					if(env.on_k8s){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "product is ${params.DNET_PRODUCT}"
							echo "workspace is $WORKSPACE"
							sh "git clone http://${GIT_USER}:${GIT_PASSWORD}@github.app.hd123.cn:10080/qianfanops/toolset.git -b ${params.GIT_BRANCH} ."
							sh "git config --global user.email qianfan@hd123.com"
							sh "git config --global user.name qianfan"
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops export_cmdb --toolset_x ${params.toolset_x}"
						}
					}else {
						echo "active profile is ${params.DNET_PROFILE}"
						echo "product is ${params.DNET_PRODUCT}"
						echo "workspace is $WORKSPACE"
						sh "git clone http://${GIT_USER}:${GIT_PASSWORD}@github.app.hd123.cn:10080/qianfanops/toolset.git -b ${params.GIT_BRANCH} ."
						sh "git config --global user.email qianfan@hd123.com"
						sh "git config --global user.name qianfan"
						sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops export_cmdb --toolset_x ${params.toolset_x}"
					}
				}
			}
        }
	    
	}
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
