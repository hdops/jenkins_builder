def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
env.USER_CRED="kaapp"
def getHost(){
    def remote = [:]
    remote.name = 'kaapp-ecs'
    remote.host = "${params.sship}"
    remote.port = "${params.sshport}".toInteger()
   	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.USER_CRED, usernameVariable: 'DB_USER_CRED_USERNAME', passwordVariable: 'DB_USER_CRED_PASSWORD']])
    {
        remote.user = DB_USER_CRED_USERNAME
        remote.password = DB_USER_CRED_PASSWORD
    }
    remote.allowAnyHosts = true
    return remote
}
pipeline {
    agent {label node}
    environment{
        def server = ''
    }   
    stages {
        stage('del-workspace') {
            steps{
                deleteDir()
            }
        }
        stage('init-server'){
            steps {
                script {                 
                   server = getHost()
                }
            }
        }
        stage('deploy-db'){
            steps {
                script {
                    sshCommand remote: server, command: "sudo sh /root/ka-toolset/ka_deploy/script/$suffix/db/$KAAPPNAME'_'$suffix/deploy.sh $MODE $VERSION $DBLINK $RDBUSER $RDBPAWD"
                }
            }
        }
    }
}
