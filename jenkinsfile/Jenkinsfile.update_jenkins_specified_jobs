def node="master"
if (env.node){
    node =env.node
}

def git_base_url="http://github.app.hd123.cn:10080"
if (env.git_base_url){
    git_base_url=env.git_base_url
}

def DINGTALK_TOKEN = 'c809dcef2819cae9f4baa46c46d4e4c9864af899ae81b7145987d026cc51a87a'
if (env.DINGTALK_TOKEN){
   DINGTALK_TOKEN = env.DINGTALK_TOKEN
}

if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def update_shell="jenkins-jobs --conf jenkins_jobs.ini update"

pipeline {
	agent {
        docker {
            label node
            image "harbor.qianfan123.com/base/jenkins-job-builder:0.1.0"
            args '-v ${WORKSPACE}/jenkins:/root/jenkins -v $WORKSPACE/jenkins_11_34.ini:/root/jenkins_jobs.ini'
        }
    }

    options {
	    timeout(time: 1, unit: 'HOURS')
    }

    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
                sh 'printenv'
            }
        }

        stage('download Jenkins job project yaml file') {
            steps{
				script {
                    checkout(
                        [$class: 'GitSCM', branches: [[name: "*/${env.GIT_BRANCH}"]],userRemoteConfigs: [[credentialsId: 'qianfan',url: "${git_base_url}/${git_project}.git"]]]
                    )
                }
            }
        }

        stage('build job'){
            steps{
				script {
                    echo "cfgname is: ${cfgname}"
                    if (cfgname == 'all'){
                        file=sh(returnStdout: true, script: 'find jenkins/')
                        for ( String j : file ){
                            sh "ls $j"
                        }
                    }
                    else {
                        String[] cfgstr = cfgname.split(',')
                        for ( String i : cfgstr ){
                            out = sh(script: "[ -d ${i} ]  && echo 'true' || echo 'false' ", returnStdout: true)
                            if ( out == "true" ) {
                                file=sh(returnStdout: true, script: 'find ${i}')
                                for ( String j : file ){
                                    sh "ls $j"
                                }
                            }
                            else {
                                out = sh(script: "[ -f ${i} ]  && echo 'true' || echo 'false' ", returnStdout: true)
                                if ( out == "true" ) {
                                    sh "ls $i" 
                                }
                                else {
                                    echo "${i} cannot find" 
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post{
        failure{
            script{
                if ( whether_post == 'True' ){
                    def subject = env.email_subject ? "${env.email_subject}" : "failure on Job ${env.JOB_NAME}"
                    def to = env.email_recipients ? "${env.email_recipients}" : "yuzhiyuan@hd123.com"
                    def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                    // send email
                    emailext subject: subject, to: to, body:body,attachLog:true
                }
            }
        }
    }
}