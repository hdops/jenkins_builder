def node="master"
if (env.node){
    node =env.node
}

def git_base_url="http://github.app.hd123.cn:10080"
if (env.git_base_url){
    git_base_url=env.git_base_url
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def test_shell="jenkins-jobs --conf /root/jenkins_jobs.ini test "
def update_shell="jenkins-jobs --conf /root/jenkins_jobs.ini update --workers 5"

def ignore_templates="/templates/|/ops/jenkins.yml"

def error_yaml_file=""

pipeline {
	agent {
        label node
    }

    options {
	    timeout(time: 3, unit: 'HOURS')
    }

    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }

        stage('download Jenkins job project yaml file') {
            steps{
                script {
                    retry(5){
                        git branch: "${git_project_branch}", credentialsId: "${credentialsId}", url: "${git_base_url}/${git_project}.git"
                        sh 'git submodule update --init --recursive'
                        sh 'git submodule foreach "git pull origin master"'
                    }
                }
            }
        }

        stage('get git upload changed file'){
            steps{
                script{
                    if ( currentBuild.changeSets != [] ) {
                        def path=''
                        for (changeLogSet in currentBuild.changeSets) {
                            for (entry in changeLogSet.getItems()) {
                                for (file in entry.getAffectedFiles()) {
                                    if (path == ''){
                                        path=file.getPath()
                                    } else {
                                        path=path+','+file.getPath()
                                    }
                                }
                            }
                        }
                        cfgname=cfgname+','+path
                        echo "add ${cfgname} to ${path}"
                    }
                }
            }
        }

        stage('build job'){
            steps{
                script {
                    if ( cfgname != '' ) {
                        withDockerContainer(args: "-v ${WORKSPACE}/jenkins:/root/jenkins -v ${WORKSPACE}/${jenkins_jobs_ini_config}:/root/jenkins_jobs.ini", image: "harbor.qianfan123.com/base/jenkins-job-builder:0.1.0") {
                            echo "run unit test"
                            sh "pytest -m unit --junitxml=junit.xml -sv --capture sys"

                            echo "cfgname is: ${cfgname}"
                            String[] cfgstr = cfgname.split(',')
                            for ( String i : cfgstr ){
                                if ( i == "" ) {
                                    continue
                                }
                                out = sh(script: "[ -d ${i} ] && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                                echo "${i} is dir: ${out}"
                                if ( out == "true" ) {
                                    file=sh(returnStdout: true, script: "find ${i} -type f").split('\n')
                                    file.each{ j ->
                                        out = sh(script: "echo ${j} | grep -E \"${ignore_templates}\" && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                                        if ( out == "false" ) {
                                            outstatus = sh(script: "ls $j &> /dev/null && ${test_shell} $j && ${update_shell} $j && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                                            if ( outstatus == "false" ) {
                                                echo "update ${j}: ${outstatus}"
                                                error_yaml_file=error_yaml_file+'<>'+j
                                                echo "error_yaml_file is: ${error_yaml_file}"
                                            }
                                        } else {
                                            echo "ignore ${j}"
                                        }
                                    }
                                }
                                else {
                                    out = sh(script: "[ -f ${i} ] && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                                    echo "${i} is file: ${out}"
                                    if ( out == "true" ) {
                                        outputstatus = sh(script: "ls $i  &> /dev/null && ${test_shell} $i  && ${update_shell} $i  && echo -n 'true' || echo -n 'false' ", returnStdout: true)
                                        echo "Get ${i}: ${outputstatus}"
                                        if ( outputstatus == "false" ) {
                                            error_yaml_file=error_yaml_file+'<>'+i
                                            echo "error_yaml_file is: ${error_yaml_file}"
                                        }
                                    }
                                    else {
                                        echo "${i} cannot find"
                                        sh "false" 
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('check error_yaml_file'){
            steps{
                script{
                    if ( error_yaml_file != '' ){
                        echo "${error_yaml_file}"
                        sh 'false'
                    }
                }
            }
        }
    }

    post{
        failure{
            script{
                updateGitlabCommitStatus name: 'build', state: 'failed'
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "yuzhiyuan@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext(recipientProviders: [requestor(),culprits()],subject: "${subject}", body: "${body}",attachLog:true)
            }
        }
        fixed{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]fixed on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "yuzhiyuan@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "fixed on Job ${env.JOB_NAME} in ${env.BUILD_URL}"
                // send email
                emailext(recipientProviders: [requestor(),culprits()],subject: "${subject}", body: "${body}",attachLog:true)
            }
        }
        success{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        always{
            script{
                junit allowEmptyResults: true, testResults: 'junit.xml'
            }
        }
    }
}
