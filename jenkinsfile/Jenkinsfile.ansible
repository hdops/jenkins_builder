def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="False"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    agent {label node}                
    stages {
	    stage('ansible') {
			steps{
                script{
                    if(env.on_k8s == 'True'){
                        container("hdtoolsetcore"){
                            deleteDir()
                            echo "active profile is ${params.DNET_PROFILE}"
                            echo "product is ${params.DNET_PRODUCT}"
                            echo "workspace is $WORKSPACE"
                            retry(2){
                                sh "wget http://download.qianfan123.com/toolset/dnet/develop/iac.tar.gz"
                            }
                            sh "tar zxf iac.tar.gz -C $WORKSPACE"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C $WORKSPACE"
                            sh "chmod +x ansible/*/*/inventory/*.py"
                            if ("${params.limit}"!=""){
                                sh "ansible-playbook -i ${params.inventory} ${params.playbook} -e @${params.vars} --tags ${params.tags} --limit ${params.limit}"
                            }else{
                                sh "ansible-playbook -i ${params.inventory} ${params.playbook} -e @${params.vars} --tags ${params.tags}"
                            }
                        }
                    }else{
                        deleteDir()
                        echo "active profile is ${params.DNET_PROFILE}"
                        echo "product is ${params.DNET_PRODUCT}"
                        echo "workspace is $WORKSPACE"
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
                            retry(2){
                                sh "wget http://download.qianfan123.com/toolset/dnet/develop/iac.tar.gz"
                            }
                            sh "tar zxf iac.tar.gz -C $WORKSPACE"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C $WORKSPACE"
                            sh "chmod +x ansible/*/*/inventory/*.py"
                            if ("${params.limit}"!=""){
                                sh "ansible-playbook -i ${params.inventory} ${params.playbook} -e @${params.vars} --tags ${params.tags} --limit ${params.limit}"
                            }else{
                                sh "ansible-playbook -i ${params.inventory} ${params.playbook} -e @${params.vars} --tags ${params.tags}"
                            }

                        }
                    }
                    
                }
			}
        }
        
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
