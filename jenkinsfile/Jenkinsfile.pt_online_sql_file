def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.0.1"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline{
  agent {label node}
  // options{
  //     disableConcurrentBuilds()
  //     disableResume()
  //     timeout(time:10, unit:"MINUTES")
  // }

  stages{
    stage('删除workspace') {
            steps{
                deleteDir()
            }
        }
    stage('run'){
			steps{
                script {
                    if (env.on_k8s){
                        container("hdtoolsetcore"){
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdops dataimport ptonline --jira ${params.JIRA} --dryrun ${params.dryrun} --max_load_threads ${params.MAX_LOAD_THREADS} --critical_load_threads ${params.CRITICAL_LOAD_THREADS}"
                        }
                    }else {
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdops dataimport ptonline --jira ${params.JIRA} --dryrun ${params.dryrun} --max_load_threads ${params.MAX_LOAD_THREADS} --critical_load_threads ${params.CRITICAL_LOAD_THREADS}"
                        }
                    }
                }
			}
        }
  }
    post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
