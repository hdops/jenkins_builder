def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
pipeline {
    agent {label node}
    options {   
	    timeout(time: 3, unit: 'HOURS')
    }         
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('deploy') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							sh "ssh -p 60501 dnet@${deploy_ip} 'sh /hdapp/${subsystem}/start.sh ${version}'"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").withRun('-v /var/run/docker.sock:/var/run/docker.sock') {
					    	sh "ssh -p 60501 dnet@${deploy_ip} 'sh /hdapp/${subsystem}/start.sh ${version}'"
						}
					}
				}
			}
        }
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.subsystem}:${params.version}"
			}
		}
    }
}
