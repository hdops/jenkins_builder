def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
node = "master"
if (!env.GIT_GROUP){
    env.GIT_GROUP="phoenix-config"
}
if (!env.dingding){
    env.dingding="False"
}
if (!env.on_k8s){
    env.on_k8s="False"
}

pipeline {
    agent {label node}
    
	options {
	    timeout(time: 5, unit: 'MINUTES')
    }

    stages {
        stage('delete workspace') {
			steps{
				deleteDir()
		    }
        }
        stage('下载phoenix config') {
            steps{
                git branch: "${params.GIT_BRANCH}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "http://gitlab.app.hd123.cn:10080/${GIT_GROUP}/${params.GIT_REPONAME}.git"
            }
        }
        stage('get crmVersion') {
            steps {
                script{
                    data = readYaml file: 'docker_environments.yaml'
                    echo "crmVersion is ${data.crmVersion}"
                    echo "on_k8s is ${env.on_k8s}"
                    echo "node is ${node}"
                    echo "env node is ${env.node}"
                    if (data.crmVersion){
                        env.version = data.crmVersion
                    } else {
                        error "can not get crmVersion"
                    }
                }
            }
        }
        stage('healthcheck on docker') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'False'
            }
            steps {
                script{    
                    if (env.dingding == "True") {
                        withDockerContainer(args: "-v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/phoenixcore:${version}") {
                            echo "phoenix-tools healthcheck --dingding ${dingding} --tag ${params.tag}"
                        }                        
                    } else {
                        withDockerContainer(args: "-v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/phoenixcore:${version}") {
                            echo "phoenix-tools healthcheck --tag ${params.tag}"
                        }                        
                    }
                }
            }
        }
        stage('healthcheck on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            agent {
                kubernetes{
                    containerTemplate {
                        name 'hdphoenixtoolsetcore'
                        image "harbor.qianfan123.com/toolset/phoenixcore:${version}"
                        ttyEnabled true
                        privileged false
                        alwaysPullImage true
                        workingDir '/home/jenkins/agent'
                        command '/bin/sh -c'
                        args 'cat'
                        resourceRequestCpu '50m'
                        resourceLimitCpu '100m'
                        resourceRequestMemory '100Mi'
                        resourceLimitMemory '200Mi'
                    }
                }
            }

            steps {
                container("hdphoenixtoolsetcore")   {
                    sh "phoenix-tools version"
                    if (env.dingding == "True") {
                        echo "phoenix-tools healthcheck --dingding ${dingding} --tag ${params.tag}"
                    } else {
                        echo "phoenix-tools healthcheck --tag ${params.tag}"
                    }
                } 
            }
        }
    }
}