def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline {
    agent {label node}
	options {   
	    timeout(time: 5, unit: 'MINUTES')
    }             
    stages {
        stage('更新envfile') {
			steps{
				script {
                    if (env.on_k8s){
                        container('hdtoolsetcore'){
                            echo "active profile is ${params.DNET_PROFILE}"
                            echo "product is ${params.DNET_PRODUCT}"
                            echo "workspace is $WORKSPACE"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C $WORKSPACE"
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE}  hdops env_file --version ${params.version}  --gitpath ${params.gitpath} --image ${params.image} --sourcefrom ${params.sourcefrom} --receivers={params.receivers}"
                        }
                    }else {
                        echo "active profile is ${params.DNET_PROFILE}"
                        echo "product is ${params.DNET_PRODUCT}"
                        echo "workspace is $WORKSPACE"
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C $WORKSPACE"
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE}  hdops env_file --version ${params.version}  --gitpath ${params.gitpath} --image ${params.image} --sourcefrom ${params.sourcefrom} --receivers={params.receivers}"
                        }
                    }
                }
			}
			post {
			    success {
                    script {
                        if (env.upload_envfile_job != "" && env.upload_envfile_job != null) {
                            build job: "${params.upload_envfile_job}", parameters: [string(name: 'DNET_PRODUCT', value: "${params.DNET_PRODUCT}"), string(name: 'DNET_PROFILE', value: "${params.DNET_PROFILE}"), string(name: 'image', value: "${params.image}"),string(name: 'version', value: "${params.version}"),string(name: 'GIT_BRANCH', value: "${params.GIT_BRANCH}")], propagate: false, wait: false
                        }
                    }
			    }
			}
        }
        
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.DNET_PRODUCT}:${params.image}:${params.version}"
			}
		}
    }
}
