if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def node= "master"
if (env.node){
    node =env.node
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}

def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}

def docker_image="harbor.qianfan123.com/toolset/toolsetcore:0.3.0"
if (env.toolset_image){
    docker_image = env.toolset_image
}

def nodeSelector_app="jenkins"
if (env.nodeSelector_app){
    nodeSelector_app = env.nodeSelector_app
}

def check_rdb="yes"
if (params.check_rdb){
    check_rdb = params.check_rdb
}

def check_config="yes"
if (params.check_config){
    check_config = params.check_config
}

def YAML_FILE="kubernetes_pod_template.yaml"
def label_name="jenkins-job-kubernetes-deploy"


def func = {
    BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
    def parts= BUILD_TRIGGER_BY.replace("Started by user ","").split('/')

    def userName = "${parts[0]?.trim()}"
    def userId = "${parts[1]?.trim()}"
    echo "BUILD_TRIGGER_BY is ${BUILD_TRIGGER_BY}"
    echo "parts is ${parts}"
    echo "userName is ${userName}"
    echo "userId is ${userName}"

    prefix = 'BUILD_USER=${userName} BUILD_USER_ID=${userId} JENKINS_URL=${BUILD_URL} DNET_PROJECT=${DNET_PROJECT} DNET_PRODUCT=${DNET_PRODUCT} DNET_PROFILE=${DNET_PROFILE} GIT_USER=${GITLAB_USER_USR} GIT_PASSWORD=${GITLAB_USER_PSW} '
    retry(2){
        sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch develop -p ."
    }
    sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
    sh prefix + "hdops kubernetes download_kubernetes -s None"
    sh prefix + "hdops kubernetes validate --subsystem ${image}"
    sh prefix + "hdops kubernetes appinstall --subsystem ${image} --stackids ${stackids} --checkstatus ${checkstatus}"
}


pipeline {
    agent {label node}
    options {
	    timeout(time: 3, unit: 'HOURS')
    }
    environment {
        GITLAB_USER = credentials("${credentialsId}")
    }
    stages {
        stage('advance prepare on k8s to read yaml') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            steps {
                script{
                    echo "node : ${node}"
                    echo "on_k8s : ${on_k8s}"
                    kubernetesPodYamlData = readYaml file: "jenkinsfile/${YAML_FILE}"
                    kubernetesPodYamlData.spec.containers[0].image = "${docker_image}"
                    kubernetesPodYamlData.spec.containers[0].name = "${label_name}"
                    kubernetesPodYamlData.metadata.labels.label = "${label_name}"
                    writeYaml file: "${YAML_FILE}.tmp", data: kubernetesPodYamlData
                    kubernetesPodReadYamlData = sh(script: "cat ${YAML_FILE}.tmp", returnStdout: true)
                    echo "${kubernetesPodReadYamlData}"
                } 
            }
        }
        stage('delete workspace') {
            steps{
                deleteDir()
                script{
                    if (check_rdb != "yes") {
                        echo "请检查数据库是否升级"
                        sh 'exit 1' 
                    }
                    if (check_config != "yes") {
                        echo "请检查配置是否升级"
                        sh 'exit 1' 
                    }
                }
            }
        }
        stage('部署 on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }
            agent {
                kubernetes{
                    cloud 'kubernetes'
                    yaml "${kubernetesPodReadYamlData}"
                }
            }
            steps{
                script{
                    container("${label_name}") {
                        func()
                    }
                }
            }
        }

        stage('部署 on docker') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'False'
            }
            steps{
                script {
                    sh "docker pull ${docker_image}"
                    withDockerContainer(args: "-v /root/.ssh:/root/.ssh", image: "${docker_image}") {
                        func()
                    }
                }
            }
        }
    }
    post{
      always{
        script{
            currentBuild.description = "${image}:${DNET_PROFILE}"
        }
      }
    }
}

