def node="master"
if (env.node){
    node =env.node
}

if (!env.GIT_GROUP){
    env.GIT_GROUP="phoenix-config"
}

def TOOLSET_DOCKER_REGISTRY_BASEURL = "harbor.qianfan123.com/toolset"
if (env.TOOLSET_DOCKER_REGISTRY_BASEURL){
    TOOLSET_DOCKER_REGISTRY_BASEURL  = env.TOOLSET_DOCKER_REGISTRY_BASEURL
}

def GITLAB_URL="http://gitlab.app.hd123.cn:10080"
def YAML_FILE="hdphoenixtoolsetcore.yaml"
if (env.GITLAB_URL){
    GITLAB_URL =env.GITLAB_URL
}

def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def func = {
    sh "phoenix-tools version"
    echo "注: 6.22.0后版本才支持该功能"
    
    echo "开始 ${params.subsystem} blue 节点更新"
    sh "phoenix-tools change_erueka --subsystem ${params.subsystem}  --tag blue"
    sh "phoenix-tools ${params.action} ${params.skipversion} --subsystem ${params.subsystem} --skipupgrade ${params.skipupgrade} --tag blue"

    echo "开始 ${params.subsystem} green 节点更新"
    sh "phoenix-tools change_erueka --subsystem ${params.subsystem}  --tag green"
    sh "phoenix-tools ${params.action} ${params.skipversion} --subsystem ${params.subsystem} --skipupgrade ${params.skipupgrade} --tag green"

    echo "上线 ${params.subsystem} 全部节点"
    sh "phoenix-tools change_erueka --subsystem ${params.subsystem}  --tag None"
    echo "${params.subsystem} 不停服升级完毕"
}

pipeline {
    agent {label node}

    stages {
        stage('advance prepare on k8s to read yaml') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            steps {
                script{
                    hdphoenixtoolsetcoreYamlData = readYaml file: "jenkinsfile/phoenix_docker/${YAML_FILE}"
                } 
            }
        }
        stage('delete workspace') {
			steps{
				deleteDir()
			}
        }
        stage('下载phoenix config') {
            steps{
                git branch: "${params.GIT_BRANCH}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "${GITLAB_URL}/${GIT_GROUP}/${params.GIT_REPONAME}.git"
            }
        }
        stage('使用test测试配置是否符合要求'){
            steps{
                script{
                    if(fileExists('tests')){
                        withDockerContainer(args: "-v ${WORKSPACE}:${WORKSPACE}", image: "${TOOLSET_DOCKER_REGISTRY_BASEURL}/toolsetcore:0.3.0") {
                            sh "pytest -m unit -sv"
                        }
                    }
                }
            }
        }
        stage('使用yamllint进行配置检查(当前工作目下存在.yamllint文件)'){
          steps{
            script{
              if(fileExists('.yamllint')){
                echo "检查 docker_environments.yaml phoenix.yaml application.yml配置"
                sh "yamllint -c .yamllint *.yaml *.yml"
              }
            }
          }
        }
        stage('get crmVersion') {
            steps {
                script{
                    data = readYaml file: 'docker_environments.yaml'
                    echo "crmVersion is ${data.crmVersion}"
                    echo "on_k8s is ${env.on_k8s}"
                    echo "node is ${node}"
                    if (data.crmVersion){
                        env.version = data.crmVersion
                    } else {
                        error "can not get crmVersion"
                    }
                }
            }
        }
        stage('deploy on docker') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'False'
            }
            steps {
                script{    
                    sh "docker pull  ${TOOLSET_DOCKER_REGISTRY_BASEURL}/phoenixcore:${version}"
                    withDockerContainer(args: "-v ${WORKSPACE}:/opt", image: "${TOOLSET_DOCKER_REGISTRY_BASEURL}/phoenixcore:${version}") {
                        func()    
                    }
                }
            }
        }
        stage('prepare on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            steps {
                script{
                    hdphoenixtoolsetcoreYamlData.spec.containers[0].image = "${TOOLSET_DOCKER_REGISTRY_BASEURL}/phoenixcore:${version}"
                    writeYaml file: "${WORKSPACE}@script/${YAML_FILE}", data: hdphoenixtoolsetcoreYamlData
                    sh "cat ${WORKSPACE}@script/${YAML_FILE}"
                } 
            }
        }
        stage('deploy on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            agent {
                kubernetes{
                    cloud 'kubernetes'
                    yaml "${hdphoenixtoolsetcoreYamlData}"
                }
            }

            steps {
                script{
                    container("hdphoenixtoolsetcore")   {
                        git branch: "${params.GIT_BRANCH}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "${GITLAB_URL}/${GIT_GROUP}/${params.GIT_REPONAME}.git"
                        func()
                    }
                } 
            }
        }
    }
    post{
        failure{
            script{

                def subject = env.email_subject ? "[Jenkins]${env.email_subject}" : "[Jenkins]failure on Job ${env.JOB_NAME}"
                def to = env.email_recipients ? "${env.email_recipients}" : "buhaiqing@hd123.com"
                def body = env.email_body ? "${env.email_body}" : "failure on Job ${env.JOB_NAME}"
                // send email
                emailext subject: subject, to: to, body:body,attachLog:true
            }
        }
    }
}
