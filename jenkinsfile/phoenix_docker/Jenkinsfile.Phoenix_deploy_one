def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
if (!env.GIT_GROUP){
    env.GIT_GROUP="phoenix-config"
}

if (!env.on_k8s){
    env.on_k8s="False"
}

if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def GITLAB_URL="http://gitlab.app.hd123.cn:10080"
if (env.GITLAB_URL){
    GITLAB_URL =env.GITLAB_URL
}

pipeline {
    agent {label node}
	options {
	    timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('delete workspace') {
			steps{
				deleteDir()
			}
        }
        stage('下载phoenix config') {
            steps{

                git branch: "${params.GIT_BRANCH}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "${GITLAB_URL}/${GIT_GROUP}/${params.GIT_REPONAME}.git"
            }
        }
        stage('get crmVersion') {
            steps {
                script{
                    data = readYaml file: 'docker_environments.yaml'
                    echo "crmVersion is ${data.crmVersion}"
                    echo "on_k8s is ${env.on_k8s}"
                    echo "node is ${node}"
                    if (data.crmVersion){
                        env.version = data.crmVersion
                    } else {
                        error "can not get crmVersion"
                    }
                }
            }
        }
        stage('deploy on docker') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'False'
            }
            steps {
                script{    
                    withDockerContainer(args: "-v ${WORKSPACE}:/opt", image: "harbor.qianfan123.com/toolset/phoenixcore:${version}") {
                        sh "phoenix-tools version"
                        sh "phoenix-tools ${params.action} ${params.skipversion}  --subsystem ${params.subsystem} --skipupgrade ${params.skipupgrade} --tag ${params.tag}"
                    }
                }
            }
        }
        stage('deploy on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            steps {
                script{
                    podTemplate(name: "hdphoenixtoolsetcore" , cloud: 'kubernetes', containers: [
                        containerTemplate(
                            name: 'mariadb',
                            image: "harbor.qianfan123.com/toolset/phoenixcore:${version}",
                            ttyEnabled: true,
                            privileged: false,
                            alwaysPullImage: true,
                            command: 'sleep',
                            args: '100',
                            workingDir: '/home/jenkins/agent',
                            resourceRequestCpu: '50m',
                            resourceLimitCpu: '100m',
                            resourceRequestMemory: '100Mi',
                            resourceLimitMemory: '200Mi'
                        ) ]   
                    ){
                        sh "phoenix-tools version"
                        git branch: "${params.GIT_BRANCH}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "${GITLAB_URL}/${GIT_GROUP}/${params.GIT_REPONAME}.git"
                        sh "ls"
                        sh "which docker"
                        echo "phoenix-tools ${params.action} ${params.skipversion}  --subsystem ${params.subsystem} --skipupgrade ${params.skipupgrade} --tag ${params.tag}"
                    }
                } 
            }
        }
    }
}
