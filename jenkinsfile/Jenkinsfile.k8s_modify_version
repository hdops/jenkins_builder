if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def node= "master"
if (env.node){
    node =env.node
}

def git_project_url="https://gitlab.hd123.com/qianfanops/kubernetes.git"
if (env.git_project_url){
    git_project_url = env.git_project_url
}

def git_project_branch="develop"
if (env.git_project_branch){
    git_project_branch = env.git_project_branch
}

def uploadRemoteJob="DNET_Integration_test/DNET_modify_version_Int"
if (env.uploadRemoteJob){
    uploadRemoteJob = env.uploadRemoteJob
}

def YAML_FILE="kubernetes_pod_template.yaml"
def docker_image="harbor.qianfan123.com/toolset/argocd-cli:v2.0.0"
def label_name="jenkins-job-k8s-modify-version"

def func = {
    String[] image_version_str = image_version.split(';')
    for ( String i : image_version_str ) {
        String[] image_version_str_tmp = i.split(':')
        version=image_version_str_tmp[0]
        String[] images = image_version_str_tmp[1].split(',')
        for ( String j : image_version_str ){
            image=j
            git branch: "${git_project_branch}", credentialsId: '17643215-09f8-4a9a-b0ea-c8e49777ce1d', url: "${git_project_url}"
            sh "sh modify_image_version.sh ${DNET_PRODUCT} ${image} ${DNET_PROFILE} ${version} ${DNET_PROJECT}"
            sh "git push https://${GIT_TOKEN_DATA_USR}:${GIT_TOKEN_DATA_PSW}@gitlab.hd123.com/qianfanops/kubernetes.git develop"
        }
    }
    build job: "${uploadRemoteJob}", 
        parameters: [string(name: 'DNET_PROFILE', value: DNET_PROFILE), string(name: 'DNET_PRODUCT', value: DNET_PRODUCT), string(name: 'image', value: image_version)], 
        wait: false
}


pipeline {
    agent {label node}
    options {
	    timeout(time: 3, unit: 'HOURS')
    }
    stages {
        stage('advance prepare on k8s to read yaml') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }

            steps {
                script{
                    echo "node : ${node}"
                    echo "on_k8s : ${on_k8s}"
                    kubernetesPodYamlData = readYaml file: "jenkinsfile/${YAML_FILE}"
                    kubernetesPodYamlData.spec.containers[0].image = "${docker_image}"
                    kubernetesPodYamlData.spec.containers[0].name = "${label_name}"
                    kubernetesPodYamlData.metadata.labels.label = "${label_name}"
                    writeYaml file: "${YAML_FILE}.tmp", data: kubernetesPodYamlData
                    kubernetesPodReadYamlData = sh(script: "cat ${YAML_FILE}.tmp", returnStdout: true)
                    echo "${kubernetesPodReadYamlData}"
                } 
            }
        }
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
        stage('修改版本信息 on k8s') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'True'
            }
            agent {
                kubernetes{
                    cloud 'kubernetes'
                    yaml "${kubernetesPodReadYamlData}"
                }
            }
            environment {
                GIT_TOKEN_DATA = credentials('17643215-09f8-4a9a-b0ea-c8e49777ce1d')
            }
            steps{
                script{
                    container("${label_name}") {
                        func()
                    }
                }
            }
        }

        stage('修改版本信息 on docker') {
            when {
                beforeAgent true
                environment name: 'on_k8s', value: 'False'
            }
            environment {
                GIT_TOKEN_DATA = credentials('17643215-09f8-4a9a-b0ea-c8e49777ce1d')
            }
            steps{
                script {
                    sh "docker pull ${docker_image}"
                    withDockerContainer(args: "-v /root/.ssh:/root/.ssh", image: "${docker_image}") {
                        func()
                    }
                }
            }
        }
    }
}

