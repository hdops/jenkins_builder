def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
pipeline{
  agent {label node}     

  stages{
   
    stage('run') {
        steps{
            script {
                if(env.on_k8s == 'True'){
                    container("hdtoolsetcore"){
                        retry(2){
                            sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                        }
                        sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                        sh "DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdops dataimport normal --threadcount ${params.threadcount} --jira ${params.JIRA} --dryrun ${params.dryrun}"
                    }
                }else {
                    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                        retry(2){
                            sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                        }
                        sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                        sh "DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdops dataimport normal --threadcount ${params.threadcount} --jira ${params.JIRA} --dryrun ${params.dryrun}"
                    }
                }
            }
        }
    }
   
  }
    post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    // 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
