def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

pipeline {
    agent {label node}
	options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
    //     DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
    //     DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	//    choice(name:'DNET_PROFILE', choices:'production\nintegration_test')
	//    string(name: 'DNET_PRODUCT', defaultValue: 'baas', description: '')
	//    string(name: 'host', defaultValue: '172.20.227.131', description: 'host')
	//    string(name: 'port', defaultValue: '9200', description: 'port')
	//    string(name: 'username', defaultValue: 'elastic', description: 'username')
	//    string(name: 'password', defaultValue: 'l3qdgwU1', description: 'password')
	//    string(name: 'keepday', defaultValue: '30', description: 'keepday')
	//    string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'develop')
	//   // string(name: 'DINGTALK_TOKEN', defaultValue: '5dce188d27a762b3c2518c9b2e3a96b9a3da6564a6a679dd34e0b587600576ba', description: '钉钉token')
	// }
	triggers {
        cron 'H 1 * * *'
     }
    stages {
        stage('删除workspace') {
            steps{
                deleteDir()
            }
        }
		stage('es磁盘清理') {
			steps{
				script {
                    if (env.on_k8s){
                        container("hdtoolsetcore"){
                            echo "active profile is ${params.DNET_PROFILE}"
                            echo "toolset path is ${WORKSPACE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "skip version is ${params.skipversion}"
                            echo "upstream URL is ${params.upurl}"
                            echo "svnreversion is ${params.svnreversion}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdmon clean_es_data --host ${params.host} --port ${params.port} --username ${params.username} --password ${params.password} --keepday ${params.keepday}"
                        }
                    }else {
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").pull()
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").withRun('-v /var/run/docker.sock:/var/run/docker.sock') {
                            echo "active profile is ${params.DNET_PROFILE}"
                            echo "toolset path is ${WORKSPACE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "skip version is ${params.skipversion}"
                            echo "upstream URL is ${params.upurl}"
                            echo "svnreversion is ${params.svnreversion}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PROFILE=${params.DNET_PROFILE}  DNET_PRODUCT=${params.DNET_PRODUCT} hdmon clean_es_data --host ${params.host} --port ${params.port} --username ${params.username} --password ${params.password} --keepday ${params.keepday}"
                        }

                    }
                }
			}
        }
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

