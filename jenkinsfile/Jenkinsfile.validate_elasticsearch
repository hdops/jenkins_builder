def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}

def cfgname = ""
if (env.cfgname){
   cfgname = env.cfgname
}
pipeline {
    agent {
       label  node
   }
	options {   
	    timeout(time: 5, unit: 'MINUTES')
    }            
    stages {  
		stage('validate elasticsearch') {
            steps {
                script{
                    // 判定是否运行在Kubernetes环境里
                    if(env.on_k8s == 'True'){
                        container("hdtoolsetcore"){
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops valiate_elasticsearch --job_name ${params.job_name} --disk_space_usage ${params.disk_space_usage} --cfgname ${cfgname}"
                        }
                    }else{
                        def random = new Random()
                        def randomNumber = random.nextInt(2000)+1
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside("--name toolsetcore-${randomNumber}")  {
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops valiate_elasticsearch --job_name ${params.job_name} --disk_space_usage ${params.disk_space_usage} --cfgname ${cfgname}"
                        }
                    }
                }
            }
		}

    }
 	post {
     // 构建失败之后钉钉通知
         failure {
             script {
                 if (whether_post == "True") {
                     dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "Build failed ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                 }
             }
         }
 	// 失败转成功之后钉钉通知
         fixed {
             script {
                 if (whether_post == "True") {
                     dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "Back To Normal ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                 }
             }
         }
     }
}

