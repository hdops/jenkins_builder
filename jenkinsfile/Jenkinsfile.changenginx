def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
pipeline {
    agent {label node}
    options {   
	    timeout(time: 1, unit: 'HOURS')
    }            
	stages {
	    stage('change nginx') {
			steps{
				script{
					if(env.on_k8s == 'True'){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "product is ${params.DNET_PRODUCT}"
							echo "workspace is $WORKSPACE"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C $WORKSPACE"
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops change_nginx --image ${params.image} --tag ${params.tag} --nginx_command ${params.nginx_command} --filename_nginx ${params.filename_nginx} --filename_template ${params.filename_template} --nginx_basedir ${params.nginx_basedir} --nginx_path ${params.nginx_path} --dryrun ${params.dryrun}"
						}
						
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
					        echo "active profile is ${params.DNET_PROFILE}"
                            echo "product is ${params.DNET_PRODUCT}"
                            echo "workspace is $WORKSPACE"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C $WORKSPACE"
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops change_nginx --image ${params.image} --tag ${params.tag} --nginx_command ${params.nginx_command} --filename_nginx ${params.filename_nginx} --filename_template ${params.filename_template} --nginx_basedir ${params.nginx_basedir} --nginx_path ${params.nginx_path} --dryrun ${params.dryrun}"
					    }
					}
				}
			}
			post {
			    success{
				    build job: "${params.bluegreen_changedubbo_job}", parameters: [string(name: 'DNET_PRODUCT', value: "${params.DNET_PRODUCT}"),string(name: 'DNET_PROFILE', value: "${params.DNET_PROFILE}"), string(name: 'image', value: "${params.image}"), string(name: 'GIT_BRANCH', value: "${params.GIT_BRANCH}"), string(name:'tag',value: "${params.tag}"), string(name:'dryrun',value: "${params.dryrun}")], propagate: false, wait: false
				}
			}
        }
	    
	}
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
