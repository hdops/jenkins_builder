def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline {
    agent {label node}
    options {   
	    timeout(time: 3, unit: 'HOURS')
    }                          
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('validate docker image') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
						    echo "active profile is ${params.DNET_PROFILE}"
							echo "toolset path is ${WORKSPACE}"
							echo "sub systems are ${params.subsystem}"
							echo "skip version is ${params.skipversion}"
							echo "upstream URL is ${params.upurl}"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy validate --subsystem  ${params.subsystem}"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
					        echo "active profile is ${params.DNET_PROFILE}"
                            echo "toolset path is ${WORKSPACE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "skip version is ${params.skipversion}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy validate --subsystem  ${params.subsystem}"
					    }
					}
				}
			}
        }
		stage('image download && appinstall') {
		    steps{
				script{
					if (env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy image_download --subsystem ${params.subsystem} --stackids ${params.stackIds} --tag ${params.tag}"
		        			sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy appinstall --subsystem ${params.subsystem} --stackids ${params.stackIds}  --operate ${params.action} --tag ${params.tag}"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside {
					        sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy image_download --subsystem ${params.subsystem} --stackids ${params.stackIds} --tag ${params.tag}"
		        		    sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy appinstall --subsystem ${params.subsystem} --stackids ${params.stackIds}  --operate ${params.action} --tag ${params.tag}"
					    }
					}
				}
			}
			post {
			    success{
				    build job: "${params.healthcheck_job}", parameters: [string(name: 'DNET_PROFILE', value: "${params.DNET_PROFILE}"), string(name: 'subsystem', value: "${params.subsystem}"),string(name: 'svnreversion', value: "${params.svnreversion}"), string(name: 'TOOLSET_PATH', value: "${WORKSPACE}"), string(name: 'TRUST_PUBLIC_IP', value: "${params.TRUST_PUBLIC_IP}"),string(name: 'GIT_BRANCH', value: "${params.GIT_BRANCH}"), string(name:'tag',value: "${params.tag}")], propagate: false, wait: false
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}"
			}
		}
    }
}
