def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
pipeline {
    agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
        // DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
        // DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	    // choice(name:'DNET_PROFILE', choices:'integration_test\nessp_branch\nbranch_test\nperformance_test\ntencent-int')
	    // string(name: 'subsystem', defaultValue: 'dss', description: '子系统，多值以逗号分隔，例如ras,sas,sas_config,tlsp-web,waltz_account,tlsp,spms_web_ui,spms,spms_h3_transfer,pas,zuul,eureka,mq,account,config,sequence',trim: true)
	    // choice(name:'skipversion', choices:'--no-skipversion\n--skipversion')
	    // choice(name:'skipversionupdate', choices:'--no-skipversionupdate\n--skipversionupdate')
	    // string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	    // string(name: 'svnreversion', defaultValue: '', description: '上游job传入svn版本号，不需要人为填写',trim: true)
	    // string(name: 'upurl', defaultValue: '', description: '',trim: true)
	    // string(name: 'receivers', defaultValue: 'xuhao@hd123.com,yanghaixiao@hd123.com,wangweijun@hd123.com,chenrizhang@hd123.com,guanxiaobao@hd123.com', description: '邮件通知列表',trim: true)
	    // string(name: 'dblist', defaultValue: '', description: '需要升级的数据列表，逗号分隔',trim: true)
	    // string(name: 'timeout', defaultValue: '45', description: '这个job的超时时间，升级数据库的超时时间，必须是整数，单位是分钟',trim: true)
	    // string(name: 'threadcount', defaultValue: '5', description: 'ecs上执行数据库升级的线程',trim: true)
	    // string(name: 'action', defaultValue: 'deploy', description: 'deploy or delete',trim: true)
	    // string(name: 'PRESET_IMAGE_VERSION', defaultValue: 'None', description: '',trim: true)
	    // string(name: 'stackIds', defaultValue: '', description: 'stackIds',trim: true)
	    // string(name: 'RECEIVERS_WHEN_SUCCEED', defaultValue: 'xuhao@hd123.com,yanghaixiao@hd123.com,wangweijun@hd123.com,chenrizhang@hd123.com,guanxiaobao@hd123.com', description: '数据库升级成功后，需要日志邮件的列表，多值以逗号分隔。',trim: true)
	    // choice(name: 'TRUST_PUBLIC_IP', choices:'None\nTrue', description: 'None 表示用内网部署，True 表示用外网部署')
	    // choice(name: 'DNET_PRODUCT', choices:'baas')
	    // choice(name: 'tag', choices:'None\nblue\ngreen')
	    // string(name: 'healthcheck_job', defaultValue: '', description: 'healthcheck job',trim: true)
	    // string(name: 'DNET_AK', defaultValue: 'resource/aliyun_access_key.yaml', description: 'ak peizhi',trim: true)
	// }
    stages {
		stage('download toolset') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "toolset path is ${WORKSPACE}"
							echo "sub systems are ${params.subsystem}"
							echo "skip version is ${params.skipversion}"
							echo "upstream URL is ${params.upurl}"
							echo "svnreversion is ${params.svnreversion}"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
						}
					}else {
						echo "active profile is ${params.DNET_PROFILE}"
						echo "toolset path is ${WORKSPACE}"
						echo "sub systems are ${params.subsystem}"
						echo "skip version is ${params.skipversion}"
						echo "upstream URL is ${params.upurl}"
						echo "svnreversion is ${params.svnreversion}"
						retry(2){
							sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
						}
						sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
					}
				}
			}
        }
		stage('validate docker image') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy validate --subsystem  ${params.subsystem}"
						}
					}else {
						sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy validate --subsystem  ${params.subsystem}"
					}
				}
			}
        }
		stage('image download && appinstall') {
		    steps{
				script{
					if (env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy image_download --subsystem ${params.subsystem} --stackids ${params.stackIds} --tag ${params.tag}"
		        			sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy appinstall --subsystem ${params.subsystem} --stackids ${params.stackIds}  --operate ${params.action} --tag ${params.tag}"
						}
					}else {
						sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy image_download --subsystem ${params.subsystem} --stackids ${params.stackIds} --tag ${params.tag}"
		        		sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=${params.PRESET_IMAGE_VERSION} hdops deploy appinstall --subsystem ${params.subsystem} --stackids ${params.stackIds}  --operate ${params.action} --tag ${params.tag}"
					}
				}
			}
			post {
			    success{
				    build job: "${params.healthcheck_job}", parameters: [string(name: 'DNET_PROFILE', value: "${params.DNET_PROFILE}"), string(name: 'subsystem', value: "${params.subsystem}"),string(name: 'svnreversion', value: "${params.svnreversion}"), string(name: 'TOOLSET_PATH', value: "${WORKSPACE}"), string(name: 'TRUST_PUBLIC_IP', value: "${params.TRUST_PUBLIC_IP}"),string(name: 'GIT_BRANCH', value: "${params.GIT_BRANCH}"), string(name:'tag',value: "${params.tag}")], propagate: false, wait: false
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.skipversion}"
			}
		}
    }
}
