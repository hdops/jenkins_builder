import jenkins.model.*

def node="master"
if (env.node){
    node =env.node

}
def DINGTALK_TOKEN = 'c809dcef2819cae9f4baa46c46d4e4c9864af899ae81b7145987d026cc51a87a'
if (env.DINGTALK_TOKEN){
   DINGTALK_TOKEN = env.DINGTALK_TOKEN
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
if (!env.on_k8s){
    env.on_k8s="False"
}
if (env.set_on_k8s) {
    env.on_k8s=env.set_on_k8s
}
def ci_git_server_baseurl= "http://github.app.hd123.cn:10080"
if (env.ci_git_server_baseurl){
    ci_git_server_baseurl = env.ci_git_server_baseurl
}
def credentialsId="17643215-09f8-4a9a-b0ea-c8e49777ce1d"
if (env.credentials_id){
  credentialsId = env.credentials_id
}
def run_unittest=true
if (env.run_unittest){
    run_unittest = env.run_unittest.toBoolean()
}

def TOOLSET_DOCKER_REGISTRY_BASEURL = "harbor.qianfan123.com/base"
if (env.TOOLSET_DOCKER_REGISTRY_BASEURL){
    TOOLSET_DOCKER_REGISTRY_BASEURL  = env.TOOLSET_DOCKER_REGISTRY_BASEURL
}

def jjb_docker_image="${TOOLSET_DOCKER_REGISTRY_BASEURL}/jenkins-job-builder:0.1.0"
def toolset_image_version="0.3.0"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}

pipeline {
	agent {
        docker {
        label node
        image "harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}"
        args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --add-host=hd-hz-public.oss-cn-hangzhou-internal.aliyuncs.com:47.110.23.37'
        }
    }
    options {
	    timeout(time: 1, unit: 'HOURS')
        gitLabConnection('toolset')
    }
    stages {

        stage('checkout scm'){
			steps{
                script{
                   retry(3){
                        checkout([$class: 'GitSCM', branches: [[name: "*/${env.gitlabBranch}"]], extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]],userRemoteConfigs: [[credentialsId: "${credentialsId}",url: "${ci_git_server_baseurl}/${git_project}.git"]]])
                   }
                   echo "TRUST_PUBLIC_IP is ${TRUST_PUBLIC_IP}"
                   echo "DNET_CLOUD_VENDOR is ${DNET_CLOUD_VENDOR}"

                   if ( env.DNET_PRIVATE_URL ){
                       echo "DNET_PRIVATE_URL is ${DNET_PRIVATE_URL}"
                       echo "DNET_PRIVATE_AK is ${DNET_PRIVATE_AK}"
                       echo "DNET_PRIVATE_BUCKET is ${DNET_PRIVATE_BUCKET}"
                       echo "DNET_PRIVATE_REGION is ${DNET_PRIVATE_REGION}"
                   }


                }
			}
		}
		stage("yamllint"){
		    steps{
                script{
                if ("${env.gitlabBranch}"!="jenkins" && "${env.gitlabBranch}"!="erp"){
                       sh "yamllint -c .yamllint docker_environment*.yaml"
                   }
                }
		    }
		}
		stage("unit test && package && upload"){
            when {
               expression{
                    (gitlabBranch != 'jenkins') && (git_project != 'qianfanops/jenkins_ci')
               }

                //not {
                  //environment name: 'gitlabBranch' ,value: 'jenkins'
                //}
            }
            steps{
                echo "单元测试： $run_unittest"
                script{
                    def git_commit_author = sh(returnStdout: true, script: 'git log -n 1 --pretty=format:"%an"')
                    // 提交用户是qianfanauto或opsCD时，不做单元测试
                    println("git commit author is " + git_commit_author)
                    if (run_unittest && git_commit_author!='opsCD' && git_commit_author!='qianfanauto' && git_commit_author!='appGitLab'){
                       if ("${env.gitlabBranch}"=="jenkins"){
                            sh "git submodule update --init --recursive"
                            sh "git submodule foreach git pull origin master"
                            sh "pytest -m unit  --junitxml=junit.xml -sv "
                            //sh "pytest -m unit,jjb  --junitxml=junit.xml -sv "
                       }else{
                            sh "pytest -m unit  --junitxml=junit.xml -sv"
                       }
                   }
                   if ("${env.gitlabBranch}"!="jenkins" && "${env.gitlabBranch}"!="erp" && !"${env.gitlabBranch}".startsWith("k8s_")){
                       sh "DNET_CLOUD_VENDOR=${DNET_CLOUD_VENDOR} python update_toolset_oss.py -branch ${env.gitlabBranch}"
                   }
                }
            }
		}

        stage("run jjb test"){
          when {

            expression{
                (git_project == 'qianfanops/jenkins_ci') || ( git_project != 'qianfanops/jenkins_ci' && gitlabBranch == 'jenkins')
            }
            //environment name: 'gitlabBranch' ,value: 'jenkins'
          }
          steps{
             script{
                sh "docker pull ${jjb_docker_image}"
                withDockerContainer(args: "-v /root/.ssh:/root/.ssh -v ${WORKSPACE}:/root", image: "${jjb_docker_image}") {
                    sh "rm -fr tests/__pycache__"
                   // sh "pytest -m jjb  --junitxml=junit.xml -sv "
                }

             }
          }
        }

    }
    post{
        failure{
            script{
                dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: '', message: "pack toolset failure for ${git_project} on ${BUILD_URL}", notifyPeople: ''
                updateGitlabCommitStatus name: 'build', state: 'failed'
                emailext(recipientProviders: [developers(),requestor(),culprits()],  subject: "pack toolset failure on ${git_project}", body: "failure on Job ${env.BUILD_URL}",attachLog:true)
            }
        }
        fixed{
            script{
                emailext(recipientProviders: [developers(),requestor(),culprits()],  subject: "pack toolset success on ${git_project}", body: "success on Job ${env.BUILD_URL}")
            }
        }
        success{
            script{
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        always{
            script{
                junit allowEmptyResults: true, testResults: 'junit.xml'
                currentBuild.description = "${env.gitlabBranch}"
            }
        }
    }
}
