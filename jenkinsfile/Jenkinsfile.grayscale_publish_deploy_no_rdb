def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
def toolset_image_version="0.3.0-private"
if (env.toolset_image_version){
    toolset_image_version = env.toolset_image_version
}
pipeline {
    agent {label node}
    options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
        // DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
        // DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	    // choice(name:'DNET_PROFILE', choices:'integration_test\nessp_branch\nbranch_test\nperformance_test\ntencent-int')
	    // string(name: 'subsystem', defaultValue: 'dss', description: '子系统，多值以逗号分隔，例如ras,sas,sas_config,tlsp-web,waltz_account,tlsp,spms_web_ui,spms,spms_h3_transfer,pas,zuul,eureka,mq,account,config,sequence',trim: true)
	    // string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'git branch',trim: true)
	    // string(name: 'action', defaultValue: 'deploy', description: 'deploy or delete',trim: true)
	    // choice(name: 'TRUST_PUBLIC_IP', choices:'None\nTrue', description: 'None 表示用内网部署，True 表示用外网部署')
	    // choice(name: 'DNET_PRODUCT', choices:'baas')
	    // string(name: 'DNET_AK', defaultValue: 'resource/aliyun_access_key.yaml', description: 'ak peizhi',trim: true)
	// }
    stages {
        stage('delete workspace') {
            steps{
                deleteDir()
            }
        }
		stage('download toolset') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							echo "active profile is ${params.DNET_PROFILE}"
							echo "toolset path is ${WORKSPACE}"
							echo "sub systems are ${params.subsystem}"
							echo "skip version is ${params.skipversion}"
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            echo "active profile is ${params.DNET_PROFILE}"
                            echo "toolset path is ${WORKSPACE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "skip version is ${params.skipversion}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
					    }
					}
				}
			}
        }
        stage('read grayscale_publish cfg') {
            steps {
                script{
                    data = readYaml file: "grayscale_publish-${params.DNET_PRODUCT}.yml"
                    cfg = data[env.DNET_PROFILE][env.subsystem]
                    println(cfg)
                    env.PRESET_IMAGE_VERSION = cfg.version
                    env.stackIds = cfg.stackid
                    env.dblist = cfg.dbs
                }
            }
        }
		stage('validate docker image') {
			steps{
				script{
					if(env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy validate --subsystem  ${params.subsystem}"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy validate --subsystem  ${params.subsystem}"
					    }
					}
				}
			}
        }
		stage('modify cmdb'){
			steps{
				script {
					if (env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops grayscale_publish --subsystem ${params.subsystem} --action modify_cmdb"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops grayscale_publish --subsystem ${params.subsystem} --action modify_cmdb"
					    }
					}
				}
			}
		}
		stage('image download && appinstall') {
		    steps{
				script{
					if (env.on_k8s){
						container("hdtoolsetcore"){
							sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy image_download --subsystem ${params.subsystem} --stackids $stackIds"
		        			sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy appinstall --subsystem ${params.subsystem} --stackids $stackIds  --operate ${params.action} --tag ${params.tag}"
						}
					}else {
					    docker.image("harbor.qianfan123.com/toolset/toolsetcore:${toolset_image_version}").inside  {
                            sh "DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy image_download --subsystem ${params.subsystem} --stackids $stackIds"
                            sh "DNET_AK=${params.DNET_AK} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} PRESET_IMAGE_VERSION=$PRESET_IMAGE_VERSION hdops deploy appinstall --subsystem ${params.subsystem} --stackids $stackIds  --operate ${params.action} --tag ${params.tag}"
					    }
					}
				}
			}
			post {
			    success{
				    build job: "${params.healthcheck_job}", parameters: [string(name: 'DNET_PROFILE', value: "${params.DNET_PROFILE}"), string(name: 'subsystem', value: "${params.subsystem}"), string(name: 'TOOLSET_PATH', value: "${WORKSPACE}"), string(name: 'TRUST_PUBLIC_IP', value: "${params.TRUST_PUBLIC_IP}"),string(name: 'GIT_BRANCH', value: "${params.GIT_BRANCH}"), string(name:'tag',value: "${params.tag}")], propagate: false, wait: false
				}
			}
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
        always {
			script {
				currentBuild.description = "${params.DNET_PROFILE}:${params.subsystem}:${params.skipversion}"
			}
		}
    }
}
