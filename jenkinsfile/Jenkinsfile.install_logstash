// 该 def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
pipeline 已过时
def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}
def run_on_public="None"
if (env.run_on_public){
    run_on_public=env.run_on_public
}
pipeline {
    agent {label node}
	options {   
	    timeout(time: 20, unit: 'MINUTES')
    }        
    stages {
        stage('download toolset') {
			steps{
				echo "profile is ${params.DNET_PROFILE}"
                retry(2){
				    sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet TRUST_PUBLIC_IP=${run_on_public} hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                }
				sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
			}
        }
        stage('install logstash') {
			steps{
			    sh 'docker pull harbor.qianfan123.com/base/iac:0.1.0'
				sh "docker run -i --rm -v /root/.ssh:/root/.ssh -v ${params.jenkins_home}/workspace/${JOB_NAME}/elk_build_quickly:/root/iac/elk_build_quickly harbor.qianfan123.com/base/iac:0.1.0 'ansible-playbook -i elk_build_quickly/elk_inventory hdiac/logstash/logstash7.yml -e @elk_build_quickly/logstash_vars.yml'"
			}
        }
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

