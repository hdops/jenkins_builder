def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

pipeline {
    agent {label node}
    options {
	//    buildDiscarder(logRotator(numToKeepStr: '10'))
	//    disableConcurrentBuilds()
    //    disableResume()
        timeout(time: 10, unit: 'MINUTES')
    }
	// parameters {
	//     string(name: 'container_restart_workspace', defaultValue: '/hdapp/workspace/MAS_healthcheck_production', description: 'workspace',trim: true)
	// }

	stages {
	    stage('重启所有容器') {
	        steps {
	            script {
                    if (env.on_k8s){
                        container('hdtoolsetcore'){
                            echo "profile is ${params.DNET_PROFILE}"
                            echo "sub systems are ${params.subsystem}"
                            echo "upstream URL is ${params.upurl}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops all_container_restart --dryrun ${params.dryrun} --subsystem ${params.subsystem}"
                        }
                    }else {
                        docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").withRun('-v /var/run/docker.sock:/var/run/docker.sock') {
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops all_container_restart --dryrun ${params.dryrun} --subsystem ${params.subsystem}"
                        }

                    }
                }
	        }
	    }
	}
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
