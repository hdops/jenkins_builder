def node=""
if (env.node){
    node =env.node
}else{
    node ="master"
}
def whether_post=""
if (env.whether_post){
    whether_post =env.whether_post
}else{
    whether_post ="True"
}
pipeline {
    agent {label node}
	options {
	//     buildDiscarder(logRotator(numToKeepStr: '10'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'HOURS')
    }
	// environment{
    //     DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
    //     DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
    //    choice(name:'DNET_PROFILE', choices:'production')
    //    choice(name: 'DNET_PRODUCT', choices:'dly')
	//    string(name: 'action', defaultValue: 'oss', description: '备份方式')
	//    string(name: 'hostid', defaultValue: 'ays_com_prd_app01', description: 'nginx的hostid')
	//    string(name: 'cfg_name', defaultValue: 'dly-prd', description: '备份文件清单的配置文件')
	//    string(name: 'bucket', defaultValue: 'cos02-1258325089', description: '备份到oss的bucket')
	//    string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'develop')
	//   // string(name: 'DINGTALK_TOKEN', defaultValue: '1e93162cec116308ffb29fe19ba83b0f57121cc79cfb9b0958e1b1025e55a445', description: '钉钉token')
	// }
	// triggers {
    //     cron 'H 4 * * *'
    //  }
    stages {
        stage('ecs重要文件备份 ') {
			steps{
				script{
                    if (env.on_k8s){
                        container("hdtoolsetcore"){
                            echo "profile is ${params.DNET_PROFILE}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PROFILE=${params.DNET_PROFILE} DNET_PRODUCT=${params.DNET_PRODUCT} hdops ecs_file_backup ${params.action} --hostid  ${params.hostid} --cfg_name ${params.cfg_name} --bucket ${params.bucket}"
                        }
                    }else{
                        //docker.image("harbor.qianfan123.com/toolset/toolsetcore:0.3.0").withRun('-v /var/run/docker.sock:/var/run/docker.sock') {
                            echo "profile is ${params.DNET_PROFILE}"
                            retry(2){
                                sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
                            }
                            sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PROFILE=${params.DNET_PROFILE} DNET_PRODUCT=${params.DNET_PRODUCT} hdops ecs_file_backup ${params.action} --hostid  ${params.hostid} --cfg_name ${params.cfg_name} --bucket ${params.bucket}"
                        //}
                    }
                }
			}
        }
        
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}

