def node="master"
if (env.node){
    node =env.node
}

def whether_post="False"
if (env.whether_post){
    whether_post =env.whether_post
}

pipeline {
    agent {label node}
	options {
	//     buildDiscarder(logRotator(numToKeepStr: '20'))
	//     disableConcurrentBuilds()
	//     disableResume()
	    timeout(time: 3, unit: 'MINUTES')
    }
	// environment{
    //     DNET_PRIVATE_AK="$DNET_PRIVATE_AK"
    //     DNET_PRIVATE_AS="$DNET_PRIVATE_AS"
 	// }
	// parameters {
	//    choice(name:'DNET_PROFILE', choices:'production')
	//    string(name: 'DNET_PRODUCT', defaultValue: 'pay')
	//   // choice(name: 'DINGTALK_TOKEN', choices: ['c30c8db5ffe7f60b3c580682bbcfde78e2bc4a982f8f328a0f3e927f86285717'])
	//    string(name: 'interval', defaultValue: '15m')
	//    string(name: 'receivers', defaultValue: 'gaoweizong@hd123.com')
	//    string(name: 'es_index', defaultValue: 'nginx_mbr')
	//    string(name: 'es_type', defaultValue: 'nginx_mbr')
	//    string(name: 'GIT_BRANCH', defaultValue: 'develop')
	// }
	// triggers {
    //     cron 'H/15 * * * *'
    //  }
    stages {
	    stage('delete workspace') {
			steps{
				deleteDir()
			}
        }
		stage('download toolset') {
			steps{
                script{
					if (env.on_k8s){
						container("hdtoolsetcore"){
							retry(2){
								sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
							}
							sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
						}
					}else{
						retry(2){
							sh "DNET_PROFILE=integration_test DNET_PRODUCT=dnet hdops download_toolset --branch ${params.GIT_BRANCH} -p ."
						}
						sh "tar zxf toolset.tar.gz -C ${WORKSPACE}"
					}
				}
			}
        }
		stage('tomcat accesslog responsecode check') {
            steps {
                script{
                    if (env.on_k8s){
                        container("hdtoolsetcore"){
                            sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops dft_tomcat_accesslog_responsecode_check --query ${params.query} --interval ${params.interval} --receivers ${params.receivers}"
                        }

                    }else {
                        sh "DINGTALK_TOKEN=${DINGTALK_TOKEN} DNET_PRODUCT=${params.DNET_PRODUCT} DNET_PROFILE=${params.DNET_PROFILE} hdops dft_tomcat_accesslog_responsecode_check --query ${params.query} --interval ${params.interval} --receivers ${params.receivers}"
                    }
                }
            }
		}
    }
	post {
    // 构建失败之后钉钉通知
        failure {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "构建失败 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
	// 失败转成功之后钉钉通知
        fixed {
            script {
                if (whether_post == "True") {
                    dingTalk accessToken: "${DINGTALK_TOKEN}", imageUrl: '', jenkinsUrl: "${jenkinsUrl}", message: "恢复正常 ${new Date().format("yyyy-MM-dd HH:mm:ss")}", notifyPeople: ''
                }
            }
        }
    }
}
